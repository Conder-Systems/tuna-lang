// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`demo apps can be used to create a messenger: OPS 1`] = `
Object {
  "funcs": Map {
    "get_my_messages" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": "a",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "users",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 37,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": "a",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "users",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "ndArrayLen",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": 16,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popArray",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 2,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 2,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "chats",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
          "index": 1,
        },
        "kind": "setSavedField",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": false,
          "offset": 19,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": 2,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
    ],
  },
  "globals": Map {
    "users" => Object {
      "kind": "glob",
      "name": "users",
    },
    "chats" => Object {
      "kind": "glob",
      "name": "chats",
    },
  },
}
`;

exports[`demo apps can be used to create a messenger: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "get_my_messages" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "kind": "Selection",
                  "level": Array [
                    Object {
                      "kind": "String",
                      "value": "a",
                    },
                  ],
                  "root": Object {
                    "kind": "GlobalObject",
                    "name": "users",
                  },
                },
                "right": Object {
                  "kind": "None",
                },
                "sign": "!=",
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "kind": "Selection",
                    "level": Array [
                      Object {
                        "kind": "String",
                        "value": "a",
                      },
                    ],
                    "root": Object {
                      "kind": "GlobalObject",
                      "name": "users",
                    },
                  },
                },
                Object {
                  "kind": "Save",
                  "value": Object {
                    "fields": Array [],
                    "kind": "Object",
                  },
                },
                Object {
                  "do": Array [
                    Object {
                      "kind": "Update",
                      "level": Array [
                        Object {
                          "index": 2,
                          "kind": "Saved",
                        },
                      ],
                      "operation": Object {
                        "kind": "Selection",
                        "level": Array [
                          Object {
                            "index": 2,
                            "kind": "Saved",
                          },
                        ],
                        "root": Object {
                          "kind": "GlobalObject",
                          "name": "chats",
                        },
                      },
                      "root": Object {
                        "index": 1,
                        "kind": "Saved",
                      },
                    },
                  ],
                  "kind": "ArrayForEach",
                  "target": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {
    "users" => Object {
      "kind": "glob",
      "name": "users",
    },
    "chats" => Object {
      "kind": "glob",
      "name": "chats",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`demo apps can be used to create a messenger: locks 1`] = `
Map {
  "get_my_messages" => Map {},
}
`;

exports[`language allows deleting of array fields even though it produces a runtime error: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
          "index": 0,
        },
        "kind": "deleteSavedField",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows deleting of array fields even though it produces a runtime error: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "Int",
              "value": 0,
            },
          ],
          "operation": Object {
            "kind": "DeleteField",
          },
          "root": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows deleting of array fields even though it produces a runtime error: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language allows deleting of keys in objects: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
          "index": 0,
        },
        "kind": "deleteSavedField",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows deleting of keys in objects: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "b",
            },
          ],
          "operation": Object {
            "kind": "DeleteField",
          },
          "root": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows deleting of keys in objects: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language allows directly indexing into function results: OPS 1`] = `
Object {
  "funcs": Map {
    "test" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "next",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 6,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "result",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "result",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "next",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": Object {
          "args": 1,
          "name": "test",
        },
        "kind": "invoke",
      },
      Object {
        "data": "result",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows directly indexing into function results: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "kind": "Selection",
                  "level": Array [
                    Object {
                      "kind": "String",
                      "value": "next",
                    },
                  ],
                  "root": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
                "right": Object {
                  "kind": "None",
                },
                "sign": "==",
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "fields": Array [
                      Object {
                        "key": Object {
                          "kind": "String",
                          "value": "result",
                        },
                        "kind": "Field",
                        "value": Object {
                          "kind": "None",
                        },
                      },
                    ],
                    "kind": "Object",
                  },
                },
              ],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
        Object {
          "kind": "Return",
          "value": Object {
            "fields": Array [
              Object {
                "key": Object {
                  "kind": "String",
                  "value": "result",
                },
                "kind": "Field",
                "value": Object {
                  "kind": "Selection",
                  "level": Array [
                    Object {
                      "kind": "String",
                      "value": "result",
                    },
                  ],
                  "root": Object {
                    "args": Array [
                      Object {
                        "kind": "Selection",
                        "level": Array [
                          Object {
                            "kind": "String",
                            "value": "next",
                          },
                        ],
                        "root": Object {
                          "index": 0,
                          "kind": "Saved",
                        },
                      },
                    ],
                    "function_name": "test",
                    "kind": "Call",
                  },
                },
              },
            ],
            "kind": "Object",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {
    "test",
  },
  "schemas": Object {},
}
`;

exports[`language allows directly indexing into function results: locks 1`] = `
Map {
  "test" => Map {},
}
`;

exports[`language allows expressions in object literals: OPS 1`] = `
Object {
  "funcs": Map {
    "a" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "c",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": "d",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 2,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows expressions in object literals: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "a" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "fields": Array [
              Object {
                "key": Object {
                  "kind": "String",
                  "value": "c",
                },
                "kind": "Field",
                "value": Object {
                  "index": 0,
                  "kind": "Saved",
                },
              },
              Object {
                "key": Object {
                  "kind": "String",
                  "value": "d",
                },
                "kind": "Field",
                "value": Object {
                  "kind": "Comparison",
                  "left": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                  "right": Object {
                    "kind": "Int",
                    "value": 2,
                  },
                  "sign": "==",
                },
              },
            ],
            "kind": "Object",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows expressions in object literals: locks 1`] = `
Map {
  "a" => Map {},
}
`;

exports[`language allows for loops: OPS 1`] = `
Object {
  "funcs": Map {
    "loop" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "ndArrayLen",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": 6,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popArray",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": false,
          "offset": 9,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows for loops: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "loop" => FunctionDescription {
      "computation": Array [
        Object {
          "do": Array [
            Object {
              "kind": "Return",
              "value": Object {
                "index": 1,
                "kind": "Saved",
              },
            },
          ],
          "kind": "ArrayForEach",
          "target": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows for loops: locks 1`] = `
Map {
  "loop" => Map {},
}
`;

exports[`language allows getting of whole globals: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": "g",
        "kind": "getAllFromStore",
      },
      Object {
        "data": null,
        "kind": "repackageCollection",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language allows getting of whole globals: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Selection",
            "level": Array [],
            "root": Object {
              "kind": "GlobalObject",
              "name": "g",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows getting of whole globals: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language allows global strings: OPS 1`] = `
Object {
  "funcs": Map {
    "l" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": "some lock",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "lock",
      },
      Object {
        "data": "some lock",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "release",
      },
    ],
  },
  "globals": Map {
    "LOCK" => Object {
      "kind": "glob",
      "name": "LOCK",
    },
  },
}
`;

exports[`language allows global strings: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "l" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Lock",
          "name": Object {
            "kind": "String",
            "value": "some lock",
          },
        },
        Object {
          "kind": "Release",
          "name": Object {
            "kind": "String",
            "value": "some lock",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {
    "LOCK" => Object {
      "kind": "glob",
      "name": "LOCK",
    },
  },
  "privateFuncs": Set {
    "l",
  },
  "schemas": Object {},
}
`;

exports[`language allows global strings: locks 1`] = `
Map {
  "l" => Map {},
}
`;

exports[`language allows indexing into keys results: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "getKeys",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows indexing into keys results: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "kind": "Int",
                "value": 0,
              },
            ],
            "root": Object {
              "from": Object {
                "index": 0,
                "kind": "Saved",
              },
              "kind": "Keys",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows indexing into keys results: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language allows keys on nested object: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": "cdef",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "getField",
      },
      Object {
        "data": null,
        "kind": "getKeys",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows keys on nested object: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "from": Object {
              "kind": "Selection",
              "level": Array [
                Object {
                  "kind": "String",
                  "value": "b",
                },
                Object {
                  "kind": "String",
                  "value": "cdef",
                },
              ],
              "root": Object {
                "index": 0,
                "kind": "Saved",
              },
            },
            "kind": "Keys",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows keys on nested object: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language allows locking of strings: OPS 1`] = `
Object {
  "funcs": Map {
    "l" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": "some string",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "lock",
      },
      Object {
        "data": "some string",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "release",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows locking of strings: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "l" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Lock",
          "name": Object {
            "kind": "String",
            "value": "some string",
          },
        },
        Object {
          "kind": "Release",
          "name": Object {
            "kind": "String",
            "value": "some string",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {
    "l",
  },
  "schemas": Object {},
}
`;

exports[`language allows locking of strings: locks 1`] = `
Map {
  "l" => Map {},
}
`;

exports[`language allows object literals: OPS 1`] = `
Object {
  "funcs": Map {
    "a" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": "12",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows object literals: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "a" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "fields": Array [
              Object {
                "key": Object {
                  "kind": "String",
                  "value": "b",
                },
                "kind": "Field",
                "value": Object {
                  "kind": "String",
                  "value": "12",
                },
              },
            ],
            "kind": "Object",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows object literals: locks 1`] = `
Map {
  "a" => Map {},
}
`;

exports[`language allows overwriting of some level of constants: OPS 1`] = `
Object {
  "funcs": Map {
    "b" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": "c",
        "kind": "instantiate",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
          "index": 0,
        },
        "kind": "setSavedField",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows overwriting of some level of constants: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "b" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Save",
          "value": Object {
            "fields": Array [],
            "kind": "Object",
          },
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "c",
            },
          ],
          "operation": Object {
            "kind": "Int",
            "value": 10,
          },
          "root": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows overwriting of some level of constants: locks 1`] = `
Map {
  "b" => Map {},
}
`;

exports[`language allows string concat: OPS 1`] = `
Object {
  "funcs": Map {
    "concat" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": "a",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language allows string concat: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "concat" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "String",
            "value": "a",
          },
        },
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "kind": "String",
              "value": "b",
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {
    "concat",
  },
  "schemas": Object {},
}
`;

exports[`language allows string concat: locks 1`] = `
Map {
  "concat" => Map {},
}
`;

exports[`language allows users to call keys() on globals and locals: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "getKeys",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": Array [],
        "kind": "instantiate",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": Array [
          "g",
          Object {
            "_val": false,
          },
        ],
        "kind": "queryStore",
      },
      Object {
        "data": null,
        "kind": "ndArrayLen",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": 5,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popArray",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": Object {
          "stack_offset": 1,
        },
        "kind": "pArrayPush",
      },
      Object {
        "data": Object {
          "fwd": false,
          "offset": 8,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
    ],
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language allows users to call keys() on globals and locals: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Save",
          "value": Object {
            "from": Object {
              "index": 0,
              "kind": "Saved",
            },
            "kind": "Keys",
          },
        },
        Object {
          "kind": "Save",
          "value": Object {
            "from": Object {
              "kind": "GlobalObject",
              "name": "g",
            },
            "kind": "Keys",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language allows users to call keys() on globals and locals: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language can declare temp variables: OPS 1`] = `
Object {
  "funcs": Map {
    "fff" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": true,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": false,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language can declare temp variables: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Bool",
            "value": true,
          },
        },
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Bool",
            "value": false,
          },
        },
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "index": 1,
                "kind": "Saved",
              },
            ],
            "root": Object {
              "index": 0,
              "kind": "Saved",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language can declare temp variables: locks 1`] = `
Map {
  "fff" => Map {},
}
`;

exports[`language can overwrite inputs: OPS 1`] = `
Object {
  "funcs": Map {
    "fff" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": false,
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "overwriteHeap",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language can overwrite inputs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [],
          "operation": Object {
            "kind": "Bool",
            "value": false,
          },
          "root": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language can overwrite inputs: locks 1`] = `
Map {
  "fff" => Map {},
}
`;

exports[`language cannot have a variable with the same name as a function 1`] = `
"In function fff: 
	The name fff is initialized to multiple variables/functions."
`;

exports[`language cannot have duplicate variables 1`] = `
"In function fff: 
	The name a is initialized to multiple variables/functions."
`;

exports[`language does not allow overwriting constants 1`] = `
"In function fff: 
	Attempting to overwrite constant variable b"
`;

exports[`language ensure variables declared in for loop are cleaned up: OPS 1`] = `
Object {
  "funcs": Map {
    "loop" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": "array",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "g",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "ndArrayLen",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": 6,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popArray",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 2,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": false,
          "offset": 9,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": "array",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "g",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language ensure variables declared in for loop are cleaned up: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "loop" => FunctionDescription {
      "computation": Array [
        Object {
          "do": Array [
            Object {
              "kind": "Save",
              "value": Object {
                "index": 0,
                "kind": "Saved",
              },
            },
          ],
          "kind": "ArrayForEach",
          "target": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "kind": "String",
                "value": "array",
              },
            ],
            "root": Object {
              "kind": "GlobalObject",
              "name": "g",
            },
          },
        },
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "kind": "String",
                "value": "array",
              },
            ],
            "root": Object {
              "kind": "GlobalObject",
              "name": "g",
            },
          },
        },
        Object {
          "kind": "Return",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language ensure variables declared in for loop are cleaned up: locks 1`] = `
Map {
  "loop" => Map {},
}
`;

exports[`language globals must be empty objects 1`] = `"Global someVar must be initialized as empty object or string"`;

exports[`language ifs allows any number of else ifs: OPS 1`] = `
Object {
  "funcs": Map {
    "maybe" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 3,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "a",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 20,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 3,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 12,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "c",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 3,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "c",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 4,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "d",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language ifs allows any number of else ifs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "a",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Selection",
                "level": Array [
                  Object {
                    "kind": "String",
                    "value": "b",
                  },
                ],
                "root": Object {
                  "index": 0,
                  "kind": "Saved",
                },
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "b",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Selection",
                "level": Array [
                  Object {
                    "kind": "String",
                    "value": "c",
                  },
                ],
                "root": Object {
                  "index": 0,
                  "kind": "Saved",
                },
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "c",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "d",
                  },
                },
              ],
              "kind": "Else",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language ifs allows any number of else ifs: locks 1`] = `
Map {
  "maybe" => Map {},
}
`;

exports[`language ifs allows elses: OPS 1`] = `
Object {
  "funcs": Map {
    "maybe" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 4,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language ifs allows elses: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Else",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language ifs allows elses: locks 1`] = `
Map {
  "maybe" => Map {},
}
`;

exports[`language ifs cleans up variables across else ifs: OPS 1`] = `
Object {
  "funcs": Map {
    "maybe" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 4,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 23,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 4,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 14,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "c",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 4,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 5,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language ifs cleans up variables across else ifs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Selection",
                "level": Array [
                  Object {
                    "kind": "String",
                    "value": "b",
                  },
                ],
                "root": Object {
                  "index": 0,
                  "kind": "Saved",
                },
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Selection",
                "level": Array [
                  Object {
                    "kind": "String",
                    "value": "c",
                  },
                ],
                "root": Object {
                  "index": 0,
                  "kind": "Saved",
                },
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Else",
            },
          ],
          "kind": "If",
        },
        Object {
          "kind": "Save",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language ifs cleans up variables across else ifs: locks 1`] = `
Map {
  "maybe" => Map {},
}
`;

exports[`language ifs cleans up variables in ifs: OPS 1`] = `
Object {
  "funcs": Map {
    "maybe" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 4,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language ifs cleans up variables in ifs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
        Object {
          "kind": "Save",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
        Object {
          "kind": "Return",
          "value": Object {
            "index": 1,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language ifs cleans up variables in ifs: locks 1`] = `
Map {
  "maybe" => Map {},
}
`;

exports[`language ifs else scope is cleaned up after each block: OPS 1`] = `
Object {
  "funcs": Map {
    "maybe" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 4,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 5,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language ifs else scope is cleaned up after each block: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Else",
            },
          ],
          "kind": "If",
        },
        Object {
          "kind": "Save",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language ifs else scope is cleaned up after each block: locks 1`] = `
Map {
  "maybe" => Map {},
}
`;

exports[`language ifs single simple if: OPS 1`] = `
Object {
  "funcs": Map {
    "maybe" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 3,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language ifs single simple if: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language ifs single simple if: locks 1`] = `
Map {
  "maybe" => Map {},
}
`;

exports[`language infix operators * / * / * : OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 12,
        "kind": "instantiate",
      },
      Object {
        "data": 2,
        "kind": "instantiate",
      },
      Object {
        "data": 4,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": 3,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": 9,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": 6,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators * / * / * : intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 12,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Math",
                  "left": Object {
                    "kind": "Math",
                    "left": Object {
                      "kind": "Int",
                      "value": 2,
                    },
                    "right": Object {
                      "kind": "Int",
                      "value": 4,
                    },
                    "sign": "/",
                  },
                  "right": Object {
                    "kind": "Int",
                    "value": 3,
                  },
                  "sign": "*",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 9,
                },
                "sign": "/",
              },
              "right": Object {
                "kind": "Int",
                "value": 6,
              },
              "sign": "*",
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators * / * / * : locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language infix operators * / priority: OPS 1`] = `
Object {
  "funcs": Map {
    "test" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 1,
        "kind": "instantiate",
      },
      Object {
        "data": 2,
        "kind": "instantiate",
      },
      Object {
        "data": 3,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": 4,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": null,
        "kind": "nMinus",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators * / priority: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 1,
              },
              "right": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Math",
                  "left": Object {
                    "kind": "Int",
                    "value": 2,
                  },
                  "right": Object {
                    "kind": "Int",
                    "value": 3,
                  },
                  "sign": "*",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 4,
                },
                "sign": "/",
              },
              "sign": "-",
            },
            "right": Object {
              "kind": "Int",
              "value": 10,
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators * / priority: locks 1`] = `
Map {
  "test" => Map {},
}
`;

exports[`language infix operators *: OPS 1`] = `
Object {
  "funcs": Map {
    "exponent" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators *: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "exponent" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "index": 0,
              "kind": "Saved",
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators *: locks 1`] = `
Map {
  "exponent" => Map {},
}
`;

exports[`language infix operators +: OPS 1`] = `
Object {
  "funcs": Map {
    "double" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
    "zero" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": -1,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators +: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "double" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "index": 0,
              "kind": "Saved",
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
    "zero" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "index": 0,
                "kind": "Saved",
              },
              "right": Object {
                "kind": "Int",
                "value": -1,
              },
              "sign": "*",
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators +: locks 1`] = `
Map {
  "double" => Map {},
  "zero" => Map {},
}
`;

exports[`language infix operators /: OPS 1`] = `
Object {
  "funcs": Map {
    "half" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 2,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators /: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "half" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "kind": "Int",
              "value": 2,
            },
            "sign": "/",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators /: locks 1`] = `
Map {
  "half" => Map {},
}
`;

exports[`language infix operators ==: OPS 1`] = `
Object {
  "funcs": Map {
    "comps" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 12,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 34,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 1,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "lesseq",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 28,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 2,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "less",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 22,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 3,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "lesseq",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 15,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 4,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "less",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 8,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 21,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators ==: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "comps" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 12,
                },
                "sign": "==",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 1,
                },
                "sign": "<=",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 2,
                },
                "sign": "<",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 3,
                },
                "sign": ">",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 4,
                },
                "sign": ">=",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 21,
                },
                "sign": "!=",
              },
              "do": Array [],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators ==: locks 1`] = `
Map {
  "comps" => Map {},
}
`;

exports[`language infix operators allows ands and or: OPS 1`] = `
Object {
  "funcs": Map {
    "t" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": true,
        "kind": "instantiate",
      },
      Object {
        "data": true,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "boolAnd",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
    "f" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": false,
        "kind": "instantiate",
      },
      Object {
        "data": false,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "boolOr",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators allows ands and or: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "BoolAlg",
            "left": Object {
              "kind": "Bool",
              "value": true,
            },
            "right": Object {
              "kind": "Bool",
              "value": true,
            },
            "sign": "and",
          },
        },
      ],
      "input": Array [],
    },
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "BoolAlg",
            "left": Object {
              "kind": "Bool",
              "value": false,
            },
            "right": Object {
              "kind": "Bool",
              "value": false,
            },
            "sign": "or",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators allows ands and or: locks 1`] = `
Map {
  "t" => Map {},
  "f" => Map {},
}
`;

exports[`language infix operators allows functions to invoke other functions: OPS 1`] = `
Object {
  "funcs": Map {
    "fib" => Array [
      Object {
        "data": 3,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 1,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 2,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 2,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 3,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": 2,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 1,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMinus",
      },
      Object {
        "data": Object {
          "args": 3,
          "name": "fib",
        },
        "kind": "invoke",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators allows functions to invoke other functions: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fib" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 2,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 0,
                },
                "sign": "==",
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "index": 1,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
        Object {
          "kind": "Return",
          "value": Object {
            "args": Array [
              Object {
                "index": 1,
                "kind": "Saved",
              },
              Object {
                "kind": "Math",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "index": 1,
                  "kind": "Saved",
                },
                "sign": "+",
              },
              Object {
                "kind": "Math",
                "left": Object {
                  "index": 2,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 1,
                },
                "sign": "-",
              },
            ],
            "function_name": "fib",
            "kind": "Call",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {
    "fib",
  },
  "schemas": Object {},
}
`;

exports[`language infix operators allows functions to invoke other functions: locks 1`] = `
Map {
  "fib" => Map {},
}
`;

exports[`language infix operators allows private functions: OPS 1`] = `
Object {
  "funcs": Map {
    "shh" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators allows private functions: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "shh" => FunctionDescription {
      "computation": Array [],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {
    "shh",
  },
  "schemas": Object {},
}
`;

exports[`language infix operators allows private functions: locks 1`] = `
Map {
  "shh" => Map {},
}
`;

exports[`language infix operators divide divide then multiply: OPS 1`] = `
Object {
  "funcs": Map {
    "t" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 100,
        "kind": "instantiate",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": 42,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators divide divide then multiply: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 100,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "sign": "*",
              },
              "right": Object {
                "kind": "Int",
                "value": 42,
              },
              "sign": "/",
            },
            "sign": "/",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators divide divide then multiply: locks 1`] = `
Map {
  "t" => Map {},
}
`;

exports[`language infix operators divide divide: OPS 1`] = `
Object {
  "funcs": Map {
    "t" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 100,
        "kind": "instantiate",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": 99,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators divide divide: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 100,
              },
              "right": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "sign": "*",
              },
              "sign": "/",
            },
            "right": Object {
              "kind": "Int",
              "value": 99,
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators divide divide: locks 1`] = `
Map {
  "t" => Map {},
}
`;

exports[`language infix operators divide multiply divide: OPS 1`] = `
Object {
  "funcs": Map {
    "t" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": 2,
        "kind": "instantiate",
      },
      Object {
        "data": 4,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": 2,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators divide multiply divide: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 10,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 2,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 4,
                },
                "sign": "/",
              },
              "right": Object {
                "kind": "Int",
                "value": 2,
              },
              "sign": "*",
            },
            "sign": "/",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators divide multiply divide: locks 1`] = `
Map {
  "t" => Map {},
}
`;

exports[`language infix operators infers intent when mixing comparisons and boolean expressions: OPS 1`] = `
Object {
  "funcs": Map {
    "test" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 12,
        "kind": "instantiate",
      },
      Object {
        "data": 13,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "less",
      },
      Object {
        "data": 15,
        "kind": "instantiate",
      },
      Object {
        "data": 16,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "lesseq",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": null,
        "kind": "boolAnd",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators infers intent when mixing comparisons and boolean expressions: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "BoolAlg",
            "left": Object {
              "kind": "Comparison",
              "left": Object {
                "kind": "Int",
                "value": 12,
              },
              "right": Object {
                "kind": "Int",
                "value": 13,
              },
              "sign": "<",
            },
            "right": Object {
              "kind": "Comparison",
              "left": Object {
                "kind": "Int",
                "value": 15,
              },
              "right": Object {
                "kind": "Int",
                "value": 16,
              },
              "sign": ">",
            },
            "sign": "and",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators infers intent when mixing comparisons and boolean expressions: locks 1`] = `
Map {
  "test" => Map {},
}
`;

exports[`language infix operators make sure and suffixes on names aren't mistaken for infixes: OPS 1`] = `
Object {
  "funcs": Map {
    "test" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators make sure and suffixes on names aren't mistaken for infixes: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators make sure and suffixes on names aren't mistaken for infixes: locks 1`] = `
Map {
  "test" => Map {},
}
`;

exports[`language infix operators many concat: OPS 1`] = `
Object {
  "funcs": Map {
    "concat" => Array [
      Object {
        "data": 2,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 1,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "-",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators many concat: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "concat" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "index": 0,
                "kind": "Saved",
              },
              "right": Object {
                "kind": "String",
                "value": "-",
              },
              "sign": "+",
            },
            "right": Object {
              "index": 1,
              "kind": "Saved",
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators many concat: locks 1`] = `
Map {
  "concat" => Map {},
}
`;

exports[`language infix operators math ordering: OPS 1`] = `
Object {
  "funcs": Map {
    "check_ordering" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "nMinus",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators math ordering: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "check_ordering" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 10,
              },
              "right": Object {
                "kind": "Math",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "sign": "*",
              },
              "sign": "-",
            },
            "right": Object {
              "kind": "Int",
              "value": 10,
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators math ordering: locks 1`] = `
Map {
  "check_ordering" => Map {},
}
`;

exports[`language infix operators minus minus plus: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": 5,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMinus",
      },
      Object {
        "data": 5,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMinus",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators minus minus plus: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 5,
                },
                "sign": "-",
              },
              "right": Object {
                "kind": "Int",
                "value": 5,
              },
              "sign": "-",
            },
            "right": Object {
              "kind": "Int",
              "value": 10,
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators minus minus plus: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language infix operators multiple parts summed: OPS 1`] = `
Object {
  "funcs": Map {
    "t" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": 7,
        "kind": "instantiate",
      },
      Object {
        "data": 7,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": 51,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMinus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators multiple parts summed: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "sign": "*",
              },
              "right": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 7,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 7,
                },
                "sign": "*",
              },
              "sign": "+",
            },
            "right": Object {
              "kind": "Int",
              "value": 51,
            },
            "sign": "-",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators multiple parts summed: locks 1`] = `
Map {
  "t" => Map {},
}
`;

exports[`language infix operators multiply divide divide: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 100,
        "kind": "instantiate",
      },
      Object {
        "data": 2,
        "kind": "instantiate",
      },
      Object {
        "data": 25,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": 8,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators multiply divide divide: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 100,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 2,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 25,
                },
                "sign": "/",
              },
              "right": Object {
                "kind": "Int",
                "value": 8,
              },
              "sign": "/",
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators multiply divide divide: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language infix operators multiply multiply divide multiply: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": 500,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nDivide",
      },
      Object {
        "data": 0.5,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators multiply multiply divide multiply: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 10,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Math",
                  "left": Object {
                    "kind": "Int",
                    "value": 10,
                  },
                  "right": Object {
                    "kind": "Int",
                    "value": 10,
                  },
                  "sign": "*",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 500,
                },
                "sign": "/",
              },
              "right": Object {
                "kind": "Int",
                "value": 0.5,
              },
              "sign": "*",
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators multiply multiply divide multiply: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language infix operators plus plus minus: OPS 1`] = `
Object {
  "funcs": Map {
    "f" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": 10,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": 30,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMinus",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators plus plus minus: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "sign": "+",
              },
              "right": Object {
                "kind": "Int",
                "value": 10,
              },
              "sign": "+",
            },
            "right": Object {
              "kind": "Int",
              "value": 30,
            },
            "sign": "-",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators plus plus minus: locks 1`] = `
Map {
  "f" => Map {},
}
`;

exports[`language infix operators should allow mixing of comparisons and math: OPS 1`] = `
Object {
  "funcs": Map {
    "t" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": 1,
        "kind": "instantiate",
      },
      Object {
        "data": 1,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "plus",
      },
      Object {
        "data": 3,
        "kind": "instantiate",
      },
      Object {
        "data": 1,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMinus",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language infix operators should allow mixing of comparisons and math: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Comparison",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 1,
              },
              "right": Object {
                "kind": "Int",
                "value": 1,
              },
              "sign": "+",
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 3,
              },
              "right": Object {
                "kind": "Int",
                "value": 1,
              },
              "sign": "-",
            },
            "sign": "==",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language infix operators should allow mixing of comparisons and math: locks 1`] = `
Map {
  "t" => Map {},
}
`;

exports[`language mutations push against globals and locals: OPS 1`] = `
Object {
  "funcs": Map {
    "pushes" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": "a",
        "kind": "instantiate",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": Array [],
        "kind": "instantiate",
      },
      Object {
        "data": "hello",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "arrayPush",
      },
      Object {
        "data": "world",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "arrayPush",
      },
      Object {
        "data": Object {
          "field_depth": 3,
          "index": 0,
        },
        "kind": "pushSavedField",
      },
      Object {
        "data": Object {
          "$push": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$push",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "joiner": ".",
          "nStrings": 2,
        },
        "kind": "stringConcat",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "$each",
        "kind": "instantiate",
      },
      Object {
        "data": Array [],
        "kind": "instantiate",
      },
      Object {
        "data": "goodbye",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "arrayPush",
      },
      Object {
        "data": "cruel",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "arrayPush",
      },
      Object {
        "data": "world",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "arrayPush",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "g",
          "upsert": false,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 2,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Nested key does not exist",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language mutations push against globals and locals: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "pushes" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "a",
            },
            Object {
              "kind": "String",
              "value": "b",
            },
            Object {
              "kind": "Int",
              "value": 0,
            },
          ],
          "operation": Object {
            "kind": "Push",
            "values": Array [
              Object {
                "kind": "String",
                "value": "hello",
              },
              Object {
                "kind": "String",
                "value": "world",
              },
            ],
          },
          "root": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "index": 0,
              "kind": "Saved",
            },
            Object {
              "kind": "String",
              "value": "b",
            },
          ],
          "operation": Object {
            "kind": "Push",
            "values": Array [
              Object {
                "kind": "String",
                "value": "goodbye",
              },
              Object {
                "kind": "String",
                "value": "cruel",
              },
              Object {
                "kind": "String",
                "value": "world",
              },
            ],
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "g",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language mutations push against globals and locals: locks 1`] = `
Map {
  "pushes" => Map {},
}
`;

exports[`language mutations should allow delete at any level: OPS 1`] = `
Object {
  "funcs": Map {
    "dd" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "$unset": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$unset",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": "c",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "joiner": ".",
          "nStrings": 4,
        },
        "kind": "stringConcat",
      },
      Object {
        "data": "",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": "a",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "g",
          "upsert": false,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
    ],
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language mutations should allow delete at any level: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "dd" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "a",
            },
            Object {
              "kind": "String",
              "value": "b",
            },
            Object {
              "kind": "String",
              "value": "c",
            },
            Object {
              "index": 0,
              "kind": "Saved",
            },
          ],
          "operation": Object {
            "kind": "DeleteField",
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "g",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language mutations should allow delete at any level: locks 1`] = `
Map {
  "dd" => Map {},
}
`;

exports[`language mutations should allow overwrites at a parameterized level: OPS 1`] = `
Object {
  "funcs": Map {
    "param" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "$set": Object {
            "_val": Object {},
          },
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$set",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": 12,
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "g",
          "upsert": true,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 2,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Nested key does not exist",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "$set": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$set",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": "b",
        "kind": "instantiate",
      },
      Object {
        "data": "c",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "joiner": ".",
          "nStrings": 4,
        },
        "kind": "stringConcat",
      },
      Object {
        "data": 42,
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": "a",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "g",
          "upsert": false,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 2,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Nested key does not exist",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language mutations should allow overwrites at a parameterized level: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "param" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "index": 0,
              "kind": "Saved",
            },
          ],
          "operation": Object {
            "kind": "Int",
            "value": 12,
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "g",
          },
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "a",
            },
            Object {
              "kind": "String",
              "value": "b",
            },
            Object {
              "kind": "String",
              "value": "c",
            },
            Object {
              "kind": "Int",
              "value": 0,
            },
          ],
          "operation": Object {
            "kind": "Int",
            "value": 42,
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "g",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language mutations should allow overwrites at a parameterized level: locks 1`] = `
Map {
  "param" => Map {},
}
`;

exports[`language only allows global constants 1`] = `"Global variable someVar must be const"`;

exports[`language prefix operators - is shorthand for * -1: OPS 1`] = `
Object {
  "funcs": Map {
    "min" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": -1,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "nMult",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language prefix operators - is shorthand for * -1: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "min" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "kind": "Int",
              "value": -1,
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language prefix operators - is shorthand for * -1: locks 1`] = `
Map {
  "min" => Map {},
}
`;

exports[`language prefix operators can 'not' values: OPS 1`] = `
Object {
  "funcs": Map {
    "negate" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": false,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language prefix operators can 'not' values: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "negate" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Comparison",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "kind": "Bool",
              "value": false,
            },
            "sign": "==",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language prefix operators can 'not' values: locks 1`] = `
Map {
  "negate" => Map {},
}
`;

exports[`language should allow a fixed number of args in functions: OPS 1`] = `
Object {
  "funcs": Map {
    "argy" => Array [
      Object {
        "data": 3,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 1,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 2,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language should allow a fixed number of args in functions: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "argy" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow a fixed number of args in functions: locks 1`] = `
Map {
  "argy" => Map {},
}
`;

exports[`language should allow a global object: OPS 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {
    "obj" => Object {
      "kind": "glob",
      "name": "obj",
    },
  },
}
`;

exports[`language should allow a global object: intermediate representation 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {
    "obj" => Object {
      "kind": "glob",
      "name": "obj",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow a global object: locks 1`] = `Map {}`;

exports[`language should allow array literals: OPS 1`] = `
Object {
  "funcs": Map {
    "a" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Array [],
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language should allow array literals: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "a" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "ArrayLiteral",
            "values": Array [],
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow array literals: locks 1`] = `
Map {
  "a" => Map {},
}
`;

exports[`language should allow bools, numbers, and strings: OPS 1`] = `
Object {
  "funcs": Map {
    "fff" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language should allow bools, numbers, and strings: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow bools, numbers, and strings: locks 1`] = `
Map {
  "fff" => Map {},
}
`;

exports[`language should allow empty pub funcs: OPS 1`] = `
Object {
  "funcs": Map {
    "doSomething" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language should allow empty pub funcs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "doSomething" => FunctionDescription {
      "computation": Array [],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow empty pub funcs: locks 1`] = `
Map {
  "doSomething" => Map {},
}
`;

exports[`language should allow existence checking: OPS 1`] = `
Object {
  "funcs": Map {
    "create_user" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": null,
            "kind": "string",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "users",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 3,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "user already exists",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
      Object {
        "data": Object {
          "$set": Object {
            "_val": Object {},
          },
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$set",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "chats",
        "kind": "instantiate",
      },
      Object {
        "data": Array [],
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "users",
          "upsert": true,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 2,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Nested key does not exist",
        "kind": "raiseError",
      },
      Object {
        "data": "user created",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
    "get_user" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": null,
            "kind": "string",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "exists",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "users",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": "val",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "users",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {
    "users" => Object {
      "kind": "glob",
      "name": "users",
    },
    "chats" => Object {
      "kind": "glob",
      "name": "chats",
    },
  },
}
`;

exports[`language should allow existence checking: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "create_user" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "kind": "Selection",
                  "level": Array [
                    Object {
                      "index": 0,
                      "kind": "Saved",
                    },
                  ],
                  "root": Object {
                    "kind": "GlobalObject",
                    "name": "users",
                  },
                },
                "right": Object {
                  "kind": "None",
                },
                "sign": "!=",
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "user already exists",
                  },
                },
              ],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "index": 0,
              "kind": "Saved",
            },
          ],
          "operation": Object {
            "fields": Array [
              Object {
                "key": Object {
                  "kind": "String",
                  "value": "chats",
                },
                "kind": "Field",
                "value": Object {
                  "kind": "ArrayLiteral",
                  "values": Array [],
                },
              },
            ],
            "kind": "Object",
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "users",
          },
        },
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "String",
            "value": "user created",
          },
        },
      ],
      "input": Array [
        Object {
          "data": null,
          "kind": "string",
        },
      ],
    },
    "get_user" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "fields": Array [
              Object {
                "key": Object {
                  "kind": "String",
                  "value": "exists",
                },
                "kind": "Field",
                "value": Object {
                  "kind": "Comparison",
                  "left": Object {
                    "kind": "Selection",
                    "level": Array [
                      Object {
                        "index": 0,
                        "kind": "Saved",
                      },
                    ],
                    "root": Object {
                      "kind": "GlobalObject",
                      "name": "users",
                    },
                  },
                  "right": Object {
                    "kind": "None",
                  },
                  "sign": "!=",
                },
              },
              Object {
                "key": Object {
                  "kind": "String",
                  "value": "val",
                },
                "kind": "Field",
                "value": Object {
                  "kind": "Selection",
                  "level": Array [
                    Object {
                      "index": 0,
                      "kind": "Saved",
                    },
                  ],
                  "root": Object {
                    "kind": "GlobalObject",
                    "name": "users",
                  },
                },
              },
            ],
            "kind": "Object",
          },
        },
      ],
      "input": Array [
        Object {
          "data": null,
          "kind": "string",
        },
      ],
    },
  },
  "globals": Map {
    "users" => Object {
      "kind": "glob",
      "name": "users",
    },
    "chats" => Object {
      "kind": "glob",
      "name": "chats",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow existence checking: locks 1`] = `
Map {
  "create_user" => Map {
    "users" => "w",
  },
  "get_user" => Map {},
}
`;

exports[`language should allow getting of nested keys: OPS 1`] = `
Object {
  "funcs": Map {
    "fff" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "gg",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 4,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": "field",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "getField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 2,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Key does not exist on global",
        "kind": "raiseError",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {
    "gg" => Object {
      "kind": "glob",
      "name": "gg",
    },
  },
}
`;

exports[`language should allow getting of nested keys: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "index": 0,
                "kind": "Saved",
              },
              Object {
                "kind": "String",
                "value": "field",
              },
            ],
            "root": Object {
              "kind": "GlobalObject",
              "name": "gg",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "gg" => Object {
      "kind": "glob",
      "name": "gg",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow getting of nested keys: locks 1`] = `
Map {
  "fff" => Map {},
}
`;

exports[`language should allow loops over inputs: OPS 1`] = `
Object {
  "funcs": Map {
    "send_message" => Array [
      Object {
        "data": 2,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": "msg",
            "kind": "TypeAlias",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 1,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Array [
          "chats",
          Object {},
        ],
        "kind": "findOneInStore",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "_val",
        "kind": "tryGetField",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": null,
        "kind": "negatePrev",
      },
      Object {
        "data": 23,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": Object {
          "$push": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$push",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": "msgs",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "joiner": ".",
          "nStrings": 2,
        },
        "kind": "stringConcat",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "$each",
        "kind": "instantiate",
      },
      Object {
        "data": Array [],
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "arrayPush",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "chats",
          "upsert": false,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 2,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Nested key does not exist",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 4,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "group does not exist",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "noop",
      },
    ],
    "create_chat_group" => Array [
      Object {
        "data": 2,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": null,
            "kind": "string",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 1,
          "schema": Object {
            "data": Array [
              Object {
                "data": null,
                "kind": "string",
              },
            ],
            "kind": "Array",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 1,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "ndArrayLen",
      },
      Object {
        "data": 0,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "equal",
      },
      Object {
        "data": 26,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popArray",
      },
      Object {
        "data": null,
        "kind": "moveStackTopToHeap",
      },
      Object {
        "data": Object {
          "$push": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$push",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": "chats",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "joiner": ".",
          "nStrings": 2,
        },
        "kind": "stringConcat",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "$each",
        "kind": "instantiate",
      },
      Object {
        "data": Array [],
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": null,
        "kind": "arrayPush",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 2,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "users",
          "upsert": false,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 2,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Nested key does not exist",
        "kind": "raiseError",
      },
      Object {
        "data": 1,
        "kind": "truncateHeap",
      },
      Object {
        "data": Object {
          "fwd": false,
          "offset": 29,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": "created",
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {
    "users" => Object {
      "kind": "glob",
      "name": "users",
    },
    "chats" => Object {
      "kind": "glob",
      "name": "chats",
    },
  },
}
`;

exports[`language should allow loops over inputs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "send_message" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "kind": "Selection",
                  "level": Array [
                    Object {
                      "index": 1,
                      "kind": "Saved",
                    },
                  ],
                  "root": Object {
                    "kind": "GlobalObject",
                    "name": "chats",
                  },
                },
                "right": Object {
                  "kind": "None",
                },
                "sign": "!=",
              },
              "do": Array [
                Object {
                  "kind": "Update",
                  "level": Array [
                    Object {
                      "index": 1,
                      "kind": "Saved",
                    },
                    Object {
                      "kind": "String",
                      "value": "msgs",
                    },
                  ],
                  "operation": Object {
                    "kind": "Push",
                    "values": Array [
                      Object {
                        "index": 0,
                        "kind": "Saved",
                      },
                    ],
                  },
                  "root": Object {
                    "kind": "GlobalObject",
                    "name": "chats",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "group does not exist",
                  },
                },
              ],
              "kind": "Else",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [
        Object {
          "data": "msg",
          "kind": "TypeAlias",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
    "create_chat_group" => FunctionDescription {
      "computation": Array [
        Object {
          "do": Array [
            Object {
              "kind": "Update",
              "level": Array [
                Object {
                  "index": 2,
                  "kind": "Saved",
                },
                Object {
                  "kind": "String",
                  "value": "chats",
                },
              ],
              "operation": Object {
                "kind": "Push",
                "values": Array [
                  Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                ],
              },
              "root": Object {
                "kind": "GlobalObject",
                "name": "users",
              },
            },
          ],
          "kind": "ArrayForEach",
          "target": Object {
            "index": 1,
            "kind": "Saved",
          },
        },
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "String",
            "value": "created",
          },
        },
      ],
      "input": Array [
        Object {
          "data": null,
          "kind": "string",
        },
        Object {
          "data": Array [
            Object {
              "data": null,
              "kind": "string",
            },
          ],
          "kind": "Array",
        },
      ],
    },
  },
  "globals": Map {
    "users" => Object {
      "kind": "glob",
      "name": "users",
    },
    "chats" => Object {
      "kind": "glob",
      "name": "chats",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {
    "msg": Object {
      "data": Object {
        "body": Object {
          "data": null,
          "kind": "string",
        },
        "from": Object {
          "data": null,
          "kind": "string",
        },
      },
      "kind": "Object",
    },
  },
}
`;

exports[`language should allow loops over inputs: locks 1`] = `
Map {
  "send_message" => Map {
    "chats" => "w",
  },
  "create_chat_group" => Map {},
}
`;

exports[`language should allow many global objects: OPS 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {
    "obj1" => Object {
      "kind": "glob",
      "name": "obj1",
    },
    "obj2" => Object {
      "kind": "glob",
      "name": "obj2",
    },
  },
}
`;

exports[`language should allow many global objects: intermediate representation 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {
    "obj1" => Object {
      "kind": "glob",
      "name": "obj1",
    },
    "obj2" => Object {
      "kind": "glob",
      "name": "obj2",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow many global objects: locks 1`] = `Map {}`;

exports[`language should allow none: OPS 1`] = `
Object {
  "funcs": Map {
    "a" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": null,
        "kind": "instantiate",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language should allow none: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "a" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "None",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow none: locks 1`] = `
Map {
  "a" => Map {},
}
`;

exports[`language should allow return statements within functions: OPS 1`] = `
Object {
  "funcs": Map {
    "returny" => Array [
      Object {
        "data": 0,
        "kind": "assertHeapLen",
      },
      Object {
        "data": null,
        "kind": "returnVoid",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`language should allow return statements within functions: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "returny" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow return statements within functions: locks 1`] = `
Map {
  "returny" => Map {},
}
`;

exports[`language should allow setting of keys on a global object: OPS 1`] = `
Object {
  "funcs": Map {
    "fff" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": undefined,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "$set": Object {
            "_val": Object {},
          },
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$set",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": "abc",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "gg",
          "upsert": true,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 2,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Nested key does not exist",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "$set": Object {
            "_val": Object {},
          },
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$set",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "gg",
          "upsert": true,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 2,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Nested key does not exist",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "$set": Object {
            "_val": Object {},
          },
        },
        "kind": "instantiate",
      },
      Object {
        "data": "$set",
        "kind": "instantiate",
      },
      Object {
        "data": "_val",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "_key": Object {},
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_key",
        "kind": "instantiate",
      },
      Object {
        "data": "abc",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "store": "gg",
          "upsert": true,
        },
        "kind": "updateOne",
      },
      Object {
        "data": null,
        "kind": "isLastNone",
      },
      Object {
        "data": 2,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": null,
        "kind": "popStack",
      },
      Object {
        "data": Object {
          "fwd": true,
          "offset": 1,
        },
        "kind": "offsetOpCursor",
      },
      Object {
        "data": "Nested key does not exist",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {
    "gg" => Object {
      "kind": "glob",
      "name": "gg",
    },
  },
}
`;

exports[`language should allow setting of keys on a global object: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "abc",
            },
          ],
          "operation": Object {
            "index": 0,
            "kind": "Saved",
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "gg",
          },
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "index": 0,
              "kind": "Saved",
            },
          ],
          "operation": Object {
            "index": 0,
            "kind": "Saved",
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "gg",
          },
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "abc",
            },
          ],
          "operation": Object {
            "index": 0,
            "kind": "Saved",
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "gg",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "gg" => Object {
      "kind": "glob",
      "name": "gg",
    },
  },
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`language should allow setting of keys on a global object: locks 1`] = `
Map {
  "fff" => Map {},
}
`;

exports[`language shouldn't allow deleting of whole variables 1`] = `
"In function f: 
	Cannot delete whole objects"
`;

exports[`roles allows declaring stateless roles: OPS 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {},
}
`;

exports[`roles allows declaring stateless roles: intermediate representation 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`roles allows declaring stateless roles: locks 1`] = `Map {}`;

exports[`roles caller can be referenced when using roles: OPS 1`] = `
Object {
  "funcs": Map {
    "privleged_thing" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": Array [
              "admin",
              Array [
                Object {
                  "data": Object {
                    "name": Object {
                      "data": null,
                      "kind": "string",
                    },
                  },
                  "kind": "Object",
                },
              ],
            ],
            "kind": "Role",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": "_state",
        "kind": "instantiate",
      },
      Object {
        "data": "name",
        "kind": "instantiate",
      },
      Object {
        "data": Object {
          "field_depth": 2,
        },
        "kind": "getField",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`roles caller can be referenced when using roles: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "privleged_thing" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "kind": "String",
                "value": "_state",
              },
              Object {
                "kind": "String",
                "value": "name",
              },
            ],
            "root": Object {
              "index": 0,
              "kind": "Saved",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": Array [
            "admin",
            Array [
              Object {
                "data": Object {
                  "name": Object {
                    "data": null,
                    "kind": "string",
                  },
                },
                "kind": "Object",
              },
            ],
          ],
          "kind": "Role",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`roles caller can be referenced when using roles: locks 1`] = `
Map {
  "privleged_thing" => Map {},
}
`;

exports[`roles caller cannot be referenced in pub scope 1`] = `
"In function bar: 
	No such entity in scope: caller"
`;

exports[`roles caller state cannot be mutated 1`] = `
"In function foo: 
	Cannot update caller"
`;

exports[`roles creating role instances: OPS 1`] = `
Object {
  "funcs": Map {
    "get_user" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": null,
            "kind": "string",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "_name": "user",
        },
        "kind": "instantiate",
      },
      Object {
        "data": "_state",
        "kind": "instantiate",
      },
      Object {
        "data": Object {},
        "kind": "instantiate",
      },
      Object {
        "data": "name",
        "kind": "instantiate",
      },
      Object {
        "data": 0,
        "kind": "copyFromHeap",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": Object {
          "field_depth": 1,
        },
        "kind": "setField",
      },
      Object {
        "data": null,
        "kind": "signRole",
      },
      Object {
        "data": null,
        "kind": "returnStackTop",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`roles creating role instances: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "get_user" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "RoleInstance",
            "role": Object {
              "data": Array [
                "user",
                Array [
                  Object {
                    "data": Object {
                      "name": Object {
                        "data": null,
                        "kind": "string",
                      },
                    },
                    "kind": "Object",
                  },
                ],
              ],
              "kind": "Role",
            },
            "state": Object {
              "fields": Array [
                Object {
                  "key": Object {
                    "kind": "String",
                    "value": "name",
                  },
                  "kind": "Field",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Object",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": null,
          "kind": "string",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`roles creating role instances: locks 1`] = `
Map {
  "get_user" => Map {},
}
`;

exports[`roles roles can be associated with functions: OPS 1`] = `
Object {
  "funcs": Map {
    "privleged_thing" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": Array [
              "admin",
              Array [
                Object {
                  "data": Object {},
                  "kind": "Object",
                },
              ],
            ],
            "kind": "Role",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`roles roles can be associated with functions: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "privleged_thing" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": Array [
            "admin",
            Array [
              Object {
                "data": Object {},
                "kind": "Object",
              },
            ],
          ],
          "kind": "Role",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`roles roles can be associated with functions: locks 1`] = `
Map {
  "privleged_thing" => Map {},
}
`;

exports[`types allows explicitly saying a type is any: OPS 1`] = `
Object {
  "funcs": Map {
    "t" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": null,
            "kind": "Any",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`types allows explicitly saying a type is any: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": null,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`types allows explicitly saying a type is any: locks 1`] = `
Map {
  "t" => Map {},
}
`;

exports[`types allows requiring inputs as primitives: OPS 1`] = `
Object {
  "funcs": Map {
    "test" => Array [
      Object {
        "data": 4,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": null,
            "kind": "string",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 1,
          "schema": Object {
            "data": null,
            "kind": "int",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 2,
          "schema": Object {
            "data": null,
            "kind": "double",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
      Object {
        "data": Object {
          "heap_pos": 3,
          "schema": Object {
            "data": null,
            "kind": "bool",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`types allows requiring inputs as primitives: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": null,
          "kind": "string",
        },
        Object {
          "data": null,
          "kind": "int",
        },
        Object {
          "data": null,
          "kind": "double",
        },
        Object {
          "data": null,
          "kind": "bool",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {},
}
`;

exports[`types allows requiring inputs as primitives: locks 1`] = `
Map {
  "test" => Map {},
}
`;

exports[`types allows type aliases: OPS 1`] = `
Object {
  "funcs": Map {
    "a" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": "MyType",
            "kind": "TypeAlias",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`types allows type aliases: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "a" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": "MyType",
          "kind": "TypeAlias",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {
    "MyType": Object {
      "data": null,
      "kind": "bool",
    },
  },
}
`;

exports[`types allows type aliases: locks 1`] = `
Map {
  "a" => Map {},
}
`;

exports[`types should allow array types: OPS 1`] = `
Object {
  "funcs": Map {
    "a" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": Array [
              Object {
                "data": "obj",
                "kind": "TypeAlias",
              },
            ],
            "kind": "Array",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`types should allow array types: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "a" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": Array [
            Object {
              "data": "obj",
              "kind": "TypeAlias",
            },
          ],
          "kind": "Array",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {
    "boolean": Object {
      "data": null,
      "kind": "bool",
    },
    "obj": Object {
      "data": Object {
        "o": Object {
          "data": Array [
            Object {
              "data": null,
              "kind": "int",
            },
          ],
          "kind": "Array",
        },
      },
      "kind": "Object",
    },
  },
}
`;

exports[`types should allow array types: locks 1`] = `
Map {
  "a" => Map {},
}
`;

exports[`types should allow object types: OPS 1`] = `
Object {
  "funcs": Map {
    "a" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": "someObj",
            "kind": "TypeAlias",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`types should allow object types: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "a" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": "someObj",
          "kind": "TypeAlias",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {
    "someObj": Object {
      "data": Object {
        "a": Object {
          "data": null,
          "kind": "bool",
        },
        "b": Object {
          "data": null,
          "kind": "int",
        },
      },
      "kind": "Object",
    },
  },
}
`;

exports[`types should allow object types: locks 1`] = `
Map {
  "a" => Map {},
}
`;

exports[`types should allow optional types: OPS 1`] = `
Object {
  "funcs": Map {
    "a" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": Array [
              Object {
                "data": null,
                "kind": "int",
              },
              Object {
                "data": null,
                "kind": "none",
              },
            ],
            "kind": "Union",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
    "q" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": "obj",
            "kind": "TypeAlias",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`types should allow optional types: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "a" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": Array [
            Object {
              "data": null,
              "kind": "int",
            },
            Object {
              "data": null,
              "kind": "none",
            },
          ],
          "kind": "Union",
        },
      ],
    },
    "q" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": "obj",
          "kind": "TypeAlias",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {
    "obj": Object {
      "data": Object {
        "b": Object {
          "data": Array [
            Object {
              "data": null,
              "kind": "double",
            },
            Object {
              "data": null,
              "kind": "none",
            },
          ],
          "kind": "Union",
        },
        "c": Object {
          "data": Array [
            Object {
              "data": null,
              "kind": "string",
            },
            Object {
              "data": null,
              "kind": "none",
            },
          ],
          "kind": "Union",
        },
      },
      "kind": "Object",
    },
    "opt": Object {
      "data": Array [
        Object {
          "data": null,
          "kind": "bool",
        },
        Object {
          "data": null,
          "kind": "none",
        },
      ],
      "kind": "Union",
    },
  },
}
`;

exports[`types should allow optional types: locks 1`] = `
Map {
  "a" => Map {},
  "q" => Map {},
}
`;

exports[`types should allow recursive types: OPS 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {},
}
`;

exports[`types should allow recursive types: intermediate representation 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {
    "Node": Object {
      "data": Object {
        "left": Object {
          "data": Array [
            Object {
              "data": "Node",
              "kind": "TypeAlias",
            },
            Object {
              "data": null,
              "kind": "none",
            },
          ],
          "kind": "Union",
        },
        "right": Object {
          "data": Array [
            Object {
              "data": "Node",
              "kind": "TypeAlias",
            },
            Object {
              "data": null,
              "kind": "none",
            },
          ],
          "kind": "Union",
        },
      },
      "kind": "Object",
    },
  },
}
`;

exports[`types should allow recursive types: locks 1`] = `Map {}`;

exports[`types should allow union types: OPS 1`] = `
Object {
  "funcs": Map {
    "test" => Array [
      Object {
        "data": 1,
        "kind": "assertHeapLen",
      },
      Object {
        "data": Object {
          "heap_pos": 0,
          "schema": Object {
            "data": Array [
              Object {
                "data": "Biz",
                "kind": "TypeAlias",
              },
              Object {
                "data": null,
                "kind": "double",
              },
            ],
            "kind": "Union",
          },
        },
        "kind": "enforceSchemaInstanceOnHeap",
      },
      Object {
        "data": 1,
        "kind": "conditonallySkipXops",
      },
      Object {
        "data": "invalid input",
        "kind": "raiseError",
      },
    ],
  },
  "globals": Map {},
}
`;

exports[`types should allow union types: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": Array [
            Object {
              "data": "Biz",
              "kind": "TypeAlias",
            },
            Object {
              "data": null,
              "kind": "double",
            },
          ],
          "kind": "Union",
        },
      ],
    },
  },
  "globals": Map {},
  "privateFuncs": Set {},
  "schemas": Object {
    "Bar": Object {
      "data": null,
      "kind": "int",
    },
    "Biz": Object {
      "data": Array [
        Object {
          "data": "Foo",
          "kind": "TypeAlias",
        },
        Object {
          "data": Array [
            Object {
              "data": "Bar",
              "kind": "TypeAlias",
            },
            Object {
              "data": Array [
                Object {
                  "data": Object {
                    "foobar": Object {
                      "data": null,
                      "kind": "int",
                    },
                  },
                  "kind": "Object",
                },
              ],
              "kind": "Array",
            },
          ],
          "kind": "Union",
        },
      ],
      "kind": "Union",
    },
    "Foo": Object {
      "data": null,
      "kind": "string",
    },
  },
}
`;

exports[`types should allow union types: locks 1`] = `
Map {
  "test" => Map {},
}
`;
