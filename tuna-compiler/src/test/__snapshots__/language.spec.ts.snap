// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`language allows deleting of array fields even though it produces a runtime error: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "Int",
              "value": 0,
            },
          ],
          "operation": Object {
            "kind": "DeleteField",
          },
          "root": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language allows deleting of keys in objects: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "b",
            },
          ],
          "operation": Object {
            "kind": "DeleteField",
          },
          "root": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language allows for loops: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "loop" => FunctionDescription {
      "computation": Array [
        Object {
          "do": Array [
            Object {
              "kind": "Return",
              "value": Object {
                "index": 1,
                "kind": "Saved",
              },
            },
          ],
          "kind": "ArrayForEach",
          "target": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language allows keys on nested object: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Keys",
            "target": Object {
              "kind": "Selection",
              "level": Array [
                Object {
                  "kind": "String",
                  "value": "b",
                },
                Object {
                  "kind": "String",
                  "value": "cdef",
                },
              ],
              "root": Object {
                "index": 0,
                "kind": "Saved",
              },
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language allows users to call keys() on globals and locals: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Keys",
            "target": Object {
              "index": 0,
              "kind": "Saved",
            },
          },
        },
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Keys",
            "target": Object {
              "kind": "GlobalObject",
              "name": "g",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language can declare temp variables: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Bool",
            "value": true,
          },
        },
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Bool",
            "value": false,
          },
        },
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "index": 1,
                "kind": "Saved",
              },
            ],
            "root": Object {
              "index": 0,
              "kind": "Saved",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language can overwrite inputs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [],
          "operation": Object {
            "kind": "Bool",
            "value": false,
          },
          "root": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language cannot have a variable with the same name as a function 1`] = `
"In function fff: 
	The name fff is initialized to multiple variables/functions."
`;

exports[`language cannot have duplicate variables 1`] = `
"In function fff: 
	The name a is initialized to multiple variables/functions."
`;

exports[`language does not allow overwriting constants 1`] = `
"In function fff: 
	Attempting to overwrite constant variable b"
`;

exports[`language ensure variables declared in for loop are cleaned up: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "loop" => FunctionDescription {
      "computation": Array [
        Object {
          "do": Array [
            Object {
              "kind": "Save",
              "value": Object {
                "index": 0,
                "kind": "Saved",
              },
            },
          ],
          "kind": "ArrayForEach",
          "target": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "kind": "String",
                "value": "array",
              },
            ],
            "root": Object {
              "kind": "GlobalObject",
              "name": "g",
            },
          },
        },
        Object {
          "kind": "Save",
          "value": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "kind": "String",
                "value": "array",
              },
            ],
            "root": Object {
              "kind": "GlobalObject",
              "name": "g",
            },
          },
        },
        Object {
          "kind": "Return",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language globals must be empty objects 1`] = `"Global someVar must be initialized as empty object"`;

exports[`language ifs allows any number of else ifs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "a",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Selection",
                "level": Array [
                  Object {
                    "kind": "String",
                    "value": "b",
                  },
                ],
                "root": Object {
                  "index": 0,
                  "kind": "Saved",
                },
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "b",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Selection",
                "level": Array [
                  Object {
                    "kind": "String",
                    "value": "c",
                  },
                ],
                "root": Object {
                  "index": 0,
                  "kind": "Saved",
                },
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "c",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "kind": "String",
                    "value": "d",
                  },
                },
              ],
              "kind": "Else",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language ifs allows elses: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Else",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language ifs cleans up variables across else ifs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Selection",
                "level": Array [
                  Object {
                    "kind": "String",
                    "value": "b",
                  },
                ],
                "root": Object {
                  "index": 0,
                  "kind": "Saved",
                },
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Selection",
                "level": Array [
                  Object {
                    "kind": "String",
                    "value": "c",
                  },
                ],
                "root": Object {
                  "index": 0,
                  "kind": "Saved",
                },
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Else",
            },
          ],
          "kind": "If",
        },
        Object {
          "kind": "Save",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language ifs cleans up variables in ifs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
        Object {
          "kind": "Save",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
        Object {
          "kind": "Return",
          "value": Object {
            "index": 1,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language ifs else scope is cleaned up after each block: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
            Object {
              "do": Array [
                Object {
                  "kind": "Save",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Else",
            },
          ],
          "kind": "If",
        },
        Object {
          "kind": "Save",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language ifs single simple if: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "maybe" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "index": 0,
                "kind": "Saved",
              },
              "do": Array [
                Object {
                  "kind": "Return",
                  "value": Object {
                    "index": 0,
                    "kind": "Saved",
                  },
                },
              ],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators * / * / * : intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 12,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Math",
                  "left": Object {
                    "kind": "Math",
                    "left": Object {
                      "kind": "Int",
                      "value": 2,
                    },
                    "right": Object {
                      "kind": "Int",
                      "value": 4,
                    },
                    "sign": "/",
                  },
                  "right": Object {
                    "kind": "Int",
                    "value": 3,
                  },
                  "sign": "*",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 9,
                },
                "sign": "/",
              },
              "right": Object {
                "kind": "Int",
                "value": 6,
              },
              "sign": "*",
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators * / priority: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 1,
              },
              "right": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Math",
                  "left": Object {
                    "kind": "Int",
                    "value": 2,
                  },
                  "right": Object {
                    "kind": "Int",
                    "value": 3,
                  },
                  "sign": "*",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 4,
                },
                "sign": "/",
              },
              "sign": "-",
            },
            "right": Object {
              "kind": "Int",
              "value": 10,
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators *: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "exponent" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "index": 0,
              "kind": "Saved",
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators +: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "double" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "index": 0,
              "kind": "Saved",
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
    "zero" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "index": 0,
                "kind": "Saved",
              },
              "right": Object {
                "kind": "Int",
                "value": -1,
              },
              "sign": "*",
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators /: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "half" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "kind": "Int",
              "value": 2,
            },
            "sign": "/",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators ==: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "comps" => FunctionDescription {
      "computation": Array [
        Object {
          "conditionally": Array [
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 12,
                },
                "sign": "==",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 1,
                },
                "sign": "<=",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 2,
                },
                "sign": "<",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 3,
                },
                "sign": ">",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 4,
                },
                "sign": ">=",
              },
              "do": Array [],
              "kind": "Conditional",
            },
            Object {
              "cond": Object {
                "kind": "Comparison",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 21,
                },
                "sign": "!=",
              },
              "do": Array [],
              "kind": "Conditional",
            },
          ],
          "kind": "If",
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators allows ands and or: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "BoolAlg",
            "left": Object {
              "kind": "Bool",
              "value": true,
            },
            "right": Object {
              "kind": "Bool",
              "value": true,
            },
            "sign": "and",
          },
        },
      ],
      "input": Array [],
    },
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "BoolAlg",
            "left": Object {
              "kind": "Bool",
              "value": false,
            },
            "right": Object {
              "kind": "Bool",
              "value": false,
            },
            "sign": "or",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators divide divide then multiply: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 100,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "sign": "*",
              },
              "right": Object {
                "kind": "Int",
                "value": 42,
              },
              "sign": "/",
            },
            "sign": "/",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators divide divide: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 100,
              },
              "right": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "sign": "*",
              },
              "sign": "/",
            },
            "right": Object {
              "kind": "Int",
              "value": 99,
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators divide multiply divide: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 10,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 2,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 4,
                },
                "sign": "/",
              },
              "right": Object {
                "kind": "Int",
                "value": 2,
              },
              "sign": "*",
            },
            "sign": "/",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators infers intent when mixing comparisons and boolean expressions: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "BoolAlg",
            "left": Object {
              "kind": "Comparison",
              "left": Object {
                "kind": "Int",
                "value": 12,
              },
              "right": Object {
                "kind": "Int",
                "value": 13,
              },
              "sign": "<",
            },
            "right": Object {
              "kind": "Comparison",
              "left": Object {
                "kind": "Int",
                "value": 15,
              },
              "right": Object {
                "kind": "Int",
                "value": 16,
              },
              "sign": ">",
            },
            "sign": "and",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators make sure and suffixes on names aren't mistaken for infixes: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators math ordering: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "check_ordering" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 10,
              },
              "right": Object {
                "kind": "Math",
                "left": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "right": Object {
                  "index": 0,
                  "kind": "Saved",
                },
                "sign": "*",
              },
              "sign": "-",
            },
            "right": Object {
              "kind": "Int",
              "value": 10,
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators minus minus plus: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 5,
                },
                "sign": "-",
              },
              "right": Object {
                "kind": "Int",
                "value": 5,
              },
              "sign": "-",
            },
            "right": Object {
              "kind": "Int",
              "value": 10,
            },
            "sign": "+",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators multiple parts summed: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "sign": "*",
              },
              "right": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 7,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 7,
                },
                "sign": "*",
              },
              "sign": "+",
            },
            "right": Object {
              "kind": "Int",
              "value": 51,
            },
            "sign": "-",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators multiply divide divide: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 100,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 2,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 25,
                },
                "sign": "/",
              },
              "right": Object {
                "kind": "Int",
                "value": 8,
              },
              "sign": "/",
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators multiply multiply divide multiply: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Int",
              "value": 10,
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Math",
                  "left": Object {
                    "kind": "Int",
                    "value": 10,
                  },
                  "right": Object {
                    "kind": "Int",
                    "value": 10,
                  },
                  "sign": "*",
                },
                "right": Object {
                  "kind": "Int",
                  "value": 500,
                },
                "sign": "/",
              },
              "right": Object {
                "kind": "Int",
                "value": 0.5,
              },
              "sign": "*",
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators plus plus minus: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "f" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Math",
                "left": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "right": Object {
                  "kind": "Int",
                  "value": 10,
                },
                "sign": "+",
              },
              "right": Object {
                "kind": "Int",
                "value": 10,
              },
              "sign": "+",
            },
            "right": Object {
              "kind": "Int",
              "value": 30,
            },
            "sign": "-",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language infix operators should allow mixing of comparisons and math: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Comparison",
            "left": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 1,
              },
              "right": Object {
                "kind": "Int",
                "value": 1,
              },
              "sign": "+",
            },
            "right": Object {
              "kind": "Math",
              "left": Object {
                "kind": "Int",
                "value": 3,
              },
              "right": Object {
                "kind": "Int",
                "value": 1,
              },
              "sign": "-",
            },
            "sign": "==",
          },
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language mutations push against globals and locals: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "pushes" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "a",
            },
            Object {
              "kind": "String",
              "value": "b",
            },
            Object {
              "kind": "Int",
              "value": 0,
            },
          ],
          "operation": Object {
            "kind": "Push",
            "values": Array [
              Object {
                "kind": "String",
                "value": "hello",
              },
              Object {
                "kind": "String",
                "value": "world",
              },
            ],
          },
          "root": Object {
            "index": 0,
            "kind": "Saved",
          },
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "index": 0,
              "kind": "Saved",
            },
            Object {
              "kind": "String",
              "value": "b",
            },
          ],
          "operation": Object {
            "kind": "Push",
            "values": Array [
              Object {
                "kind": "String",
                "value": "goodbye",
              },
              Object {
                "kind": "String",
                "value": "cruel",
              },
              Object {
                "kind": "String",
                "value": "world",
              },
            ],
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "g",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language mutations should allow delete at any level: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "dd" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "a",
            },
            Object {
              "kind": "String",
              "value": "b",
            },
            Object {
              "kind": "String",
              "value": "c",
            },
            Object {
              "index": 0,
              "kind": "Saved",
            },
          ],
          "operation": Object {
            "kind": "DeleteField",
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "g",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language mutations should allow overwrites at a parameterized level: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "param" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "index": 0,
              "kind": "Saved",
            },
          ],
          "operation": Object {
            "kind": "Int",
            "value": 12,
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "g",
          },
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "a",
            },
            Object {
              "kind": "String",
              "value": "b",
            },
            Object {
              "kind": "String",
              "value": "c",
            },
            Object {
              "kind": "Int",
              "value": 0,
            },
          ],
          "operation": Object {
            "kind": "Int",
            "value": 42,
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "g",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "g" => Object {
      "kind": "glob",
      "name": "g",
    },
  },
}
`;

exports[`language only allows global constants 1`] = `"Global variable someVar must be const"`;

exports[`language prefix operators - is shorthand for * -1: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "min" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Math",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "kind": "Int",
              "value": -1,
            },
            "sign": "*",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language prefix operators can 'not' values: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "negate" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Comparison",
            "left": Object {
              "index": 0,
              "kind": "Saved",
            },
            "right": Object {
              "kind": "Bool",
              "value": false,
            },
            "sign": "==",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language should allow a fixed number of args in functions: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "argy" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language should allow a global object: intermediate representation 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {
    "obj" => Object {
      "kind": "glob",
      "name": "obj",
    },
  },
}
`;

exports[`language should allow bools, numbers, and strings: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`language should allow empty pub funcs: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "doSomething" => FunctionDescription {
      "computation": Array [],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language should allow getting of nested keys: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": Object {
            "kind": "Selection",
            "level": Array [
              Object {
                "index": 0,
                "kind": "Saved",
              },
              Object {
                "kind": "String",
                "value": "field",
              },
            ],
            "root": Object {
              "kind": "GlobalObject",
              "name": "gg",
            },
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "gg" => Object {
      "kind": "glob",
      "name": "gg",
    },
  },
}
`;

exports[`language should allow many global objects: intermediate representation 1`] = `
Object {
  "funcs": Map {},
  "globals": Map {
    "obj1" => Object {
      "kind": "glob",
      "name": "obj1",
    },
    "obj2" => Object {
      "kind": "glob",
      "name": "obj2",
    },
  },
}
`;

exports[`language should allow return statements within functions: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "returny" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Return",
          "value": undefined,
        },
      ],
      "input": Array [],
    },
  },
  "globals": Map {},
}
`;

exports[`language should allow setting of keys on a global object: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "fff" => FunctionDescription {
      "computation": Array [
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "abc",
            },
          ],
          "operation": Object {
            "index": 0,
            "kind": "Saved",
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "gg",
          },
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "index": 0,
              "kind": "Saved",
            },
          ],
          "operation": Object {
            "index": 0,
            "kind": "Saved",
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "gg",
          },
        },
        Object {
          "kind": "Update",
          "level": Array [
            Object {
              "kind": "String",
              "value": "abc",
            },
          ],
          "operation": Object {
            "index": 0,
            "kind": "Saved",
          },
          "root": Object {
            "kind": "GlobalObject",
            "name": "gg",
          },
        },
      ],
      "input": Array [
        Object {
          "data": undefined,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {
    "gg" => Object {
      "kind": "glob",
      "name": "gg",
    },
  },
}
`;

exports[`language shouldn't allow deleting of whole variables 1`] = `
"In function f: 
	Delete cannot be applied to whole variables"
`;

exports[`types allows explicitly saying a type is any: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "t" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": null,
          "kind": "Any",
        },
      ],
    },
  },
  "globals": Map {},
}
`;

exports[`types allows requiring inputs as primitives: intermediate representation 1`] = `
Object {
  "funcs": Map {
    "test" => FunctionDescription {
      "computation": Array [],
      "input": Array [
        Object {
          "data": null,
          "kind": "string",
        },
        Object {
          "data": null,
          "kind": "int",
        },
        Object {
          "data": null,
          "kind": "double",
        },
        Object {
          "data": null,
          "kind": "bool",
        },
      ],
    },
  },
  "globals": Map {},
}
`;
