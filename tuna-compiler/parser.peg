globals := {value={varDecl | func | typeDef} {ws+ | '$'}}*

mutable := 'let'
constant := 'const'
varDecl := ws* mutability={ constant | mutable } ws+ name=name ws* equals ws* value=expression
name := name='[a-zA-Z]+\w*'
equals := '='
ws := '\s'
obj := '\{' ws* fields=fields ws* '\}'
str := '\'' value='[\w \t]*' '\''
bool := value={'true' | 'false'}
num := value='-?\d+(\.\d+)?'
none := 'none' '(?=(\s|}))'
array := '\[' values={value=expression '(\n|,|(?=\]))' ws*}*'\]'
literal := obj | str | bool | num | none | array
newLineOrComma := '\n|,'
fields := data={ws* name=name ws* ':' ws* value=expression '\s*(\n|,|(?=}))'}*
space := ' '

scopedExecution := ws* '\{' body=executable '\s*\}'
executable := ws* value={value={ret | varDecl | forLoop | ifs | assignment | expression } ws+ }*
expression :=  prefix={prefixOps}? root={ functionCall | literal | name  } methods={method}* infix={sign=infixOps arg=expression}?
method := method={parameterIndex | methodInvoke | literalIndex }

not := 'not' ws+
minus := '-' space*
prefixOps := op={not | minus}
mult := '\*' space*
plus :=  '\+'  space*
divide := '\/' space*
eq := '==' space*
neq := '!='  space*
geq := '>=' space*
gt := '>' space*
lt := '<' space*
leq := '<=' space*
and := 'and' ws+
or := 'or' ws+

infixOps := space* op={plus | minus | mult | divide | eq | neq | leq | geq | gt | lt  | and | or}
functionCall := name=name args=args
parameterIndex := '\[' space* value={expression} space* '\]'
literalIndex := '\.' value={name}
methodInvoke := '\.' name=name args=args

forLoop := 'for' space+ rowVar=name space+ 'in' space+ value=expression do=scopedExecution

objectIndex := obj=expression index={parameterIndex | literalIndex}
ret := 'return(?=\s)' space* value={'(?<= )' exp=expression}?
isPublic := 'pub' space+
func := ws* pub={isPublic}? 'func' space+ name=name space* params=params body=scopedExecution
params := '\(' ws* leadingParams={name=name schema={schema}? newLineOrComma ws*}* ws* lastParam={name=name schema={schema}?}? ws* '\)'
args := '\(' ws* leadingArgs={value=expression newLineOrComma ws*}* ws* lastArg={expression}? ws* '\)'
assignment := target=expression space* equals space* value=expression

conditionalExec := cond=expression do=scopedExecution
ifs := 'if' space+ if_this={conditionalExec} elifs={elif}*  otherwise={otherwise}?
elif := ws* 'else' space* 'if' space+ else_this={conditionalExec}
otherwise := ws* 'else' do=scopedExecution

str_t := ws* 'string' 
int_t := ws* 'int' 
double_t := ws* 'double' 
bool_t := ws* 'bool' 
any_t := ws* 'any' 
object_t := ws* '{' fields=field_t* ws* '}'
field_t := ws* name=name '\s*:\s*' schema=someType '(,|\s|(?=}))'
array_t := ws* '\[\]'
optional_t := ws* '\?'
typePostfix := mod={array_t | optional_t}
someType := type={str_t | int_t | double_t | bool_t | any_t | object_t} postfix=typePostfix?
schema := '\s*:\s* ' type={someType | name} postfix=typePostfix?

typeDef := ws* 'type' ws+ name=name ws* '=' ws* def=someType