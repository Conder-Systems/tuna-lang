/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* globals := {value={varDecl | func | typeDef} {ws+ | '$'}}*
* mutable := 'let'
* constant := 'const'
* varDecl := ws* mutability={ constant | mutable } ws+ name=name ws* equals ws* value=expression
* name := name='[a-zA-Z]+\w*'
* equals := '='
* ws := '\s'
* obj := '\{' ws* fields=fields ws* '\}'
* str := '\'' value='[\w \t]*' '\''
* bool := value={'true' | 'false'}
* num := value='-?\d+(\.\d+)?'
* none := 'none' '(?=(\s|}))'
* array := '\[' values={value=expression '(\n|,|(?=\]))' ws*}*'\]'
* literal := obj | str | bool | num | none | array
* newLineOrComma := '\n|,'
* field := name=name ws* ':' value=literal newLineOrComma?
* fields := value=field*
* space := ' '
* scopedExecution := ws* '\{' body=executable '\s*\}'
* executable := ws* value={value={ret | varDecl | forLoop | ifs | assignment | functionCall | expression } ws+ }*
* expression :=  prefix={prefixOps}? root={literal | name   } methods={method}* infix={sign=infixOps arg=expression}?
* method := method={parameterIndex | methodInvoke | literalIndex}
* not := 'not' ws+
* minus := '-' space*
* prefixOps := op={not | minus}
* mult := '\*' space*
* plus :=  '\+'  space*
* divide := '\/' space*
* eq := '==' space*
* neq := '!='  space*
* geq := '>=' space*
* gt := '>' space*
* lt := '<' space*
* leq := '<=' space*
* and := 'and' ws+
* or := 'or' ws+
* infixOps := space* op={plus | minus | mult | divide | eq | neq | leq | geq | gt | lt  | and | or}
* functionCall := name=name args=args
* parameterIndex := '\[' space* value={expression} space* '\]'
* literalIndex := '\.' value={name}
* methodInvoke := '\.' name=name args=args
* forLoop := 'for' space+ rowVar=name space+ 'in' space+ value=expression do=scopedExecution
* objectIndex := obj=expression index={parameterIndex | literalIndex}
* ret := 'return(?=\s)' space* value={'(?<= )' exp=expression}?
* func := ws* 'pub' space+ 'func' space+ name=name space* params=params body=scopedExecution
* params := '\(' ws* leadingParams={name=name schema={schema}? newLineOrComma ws*}* ws* lastParam={name=name schema={schema}?}? ws* '\)'
* args := '\(' ws* leadingArgs={value=expression newLineOrComma ws*}* ws* lastArg={expression}? ws* '\)'
* assignment := target=expression space* equals space* value=expression
* conditionalExec := cond=expression do=scopedExecution
* ifs := 'if' space+ if_this={conditionalExec} elifs={elif}*  otherwise={otherwise}?
* elif := ws* 'else' space* 'if' space+ else_this={conditionalExec}
* otherwise := ws* 'else' do=scopedExecution
* str_t := ws* 'string' 
* int_t := ws* 'int' 
* double_t := ws* 'double' 
* bool_t := ws* 'bool' 
* any_t := ws* 'any' 
* object_t := ws* '{' fields=field_t* ws* '}'
* field_t := ws* name=name '\s*:\s*' schema=someType '(,|\s|(?=}))'
* array_t := ws* '\[\]'
* optional_t := ws* '\?'
* typePostfix := mod={array_t | optional_t}
* someType := type={str_t | int_t | double_t | bool_t | any_t | object_t} postfix=typePostfix?
* schema := '\s*:\s* ' type={someType | name} postfix=typePostfix?
* typeDef := ws* 'type' ws+ name=name ws* '=' ws* def=someType
*/
type Nullable<T> = T | null;
type $$RuleType<T> = (log?: (msg: string) => void) => Nullable<T>;
export interface ContextRecorder {
    record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]): void;
}
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    globals = "globals",
    globals_$0 = "globals_$0",
    globals_$0_$0_1 = "globals_$0_$0_1",
    globals_$0_$0_2 = "globals_$0_$0_2",
    globals_$0_$0_3 = "globals_$0_$0_3",
    globals_$0_$1_1 = "globals_$0_$1_1",
    globals_$0_$1_2 = "globals_$0_$1_2",
    mutable = "mutable",
    constant = "constant",
    varDecl = "varDecl",
    varDecl_$0_1 = "varDecl_$0_1",
    varDecl_$0_2 = "varDecl_$0_2",
    name = "name",
    equals = "equals",
    ws = "ws",
    obj = "obj",
    str = "str",
    bool = "bool",
    bool_$0_1 = "bool_$0_1",
    bool_$0_2 = "bool_$0_2",
    num = "num",
    none = "none",
    array = "array",
    array_$0 = "array_$0",
    literal_1 = "literal_1",
    literal_2 = "literal_2",
    literal_3 = "literal_3",
    literal_4 = "literal_4",
    literal_5 = "literal_5",
    literal_6 = "literal_6",
    newLineOrComma = "newLineOrComma",
    field = "field",
    fields = "fields",
    space = "space",
    scopedExecution = "scopedExecution",
    executable = "executable",
    executable_$0 = "executable_$0",
    executable_$0_$0_1 = "executable_$0_$0_1",
    executable_$0_$0_2 = "executable_$0_$0_2",
    executable_$0_$0_3 = "executable_$0_$0_3",
    executable_$0_$0_4 = "executable_$0_$0_4",
    executable_$0_$0_5 = "executable_$0_$0_5",
    executable_$0_$0_6 = "executable_$0_$0_6",
    executable_$0_$0_7 = "executable_$0_$0_7",
    expression = "expression",
    expression_$0 = "expression_$0",
    expression_$1_1 = "expression_$1_1",
    expression_$1_2 = "expression_$1_2",
    expression_$2 = "expression_$2",
    expression_$3 = "expression_$3",
    method = "method",
    method_$0_1 = "method_$0_1",
    method_$0_2 = "method_$0_2",
    method_$0_3 = "method_$0_3",
    not = "not",
    minus = "minus",
    prefixOps = "prefixOps",
    prefixOps_$0_1 = "prefixOps_$0_1",
    prefixOps_$0_2 = "prefixOps_$0_2",
    mult = "mult",
    plus = "plus",
    divide = "divide",
    eq = "eq",
    neq = "neq",
    geq = "geq",
    gt = "gt",
    lt = "lt",
    leq = "leq",
    and = "and",
    or = "or",
    infixOps = "infixOps",
    infixOps_$0_1 = "infixOps_$0_1",
    infixOps_$0_2 = "infixOps_$0_2",
    infixOps_$0_3 = "infixOps_$0_3",
    infixOps_$0_4 = "infixOps_$0_4",
    infixOps_$0_5 = "infixOps_$0_5",
    infixOps_$0_6 = "infixOps_$0_6",
    infixOps_$0_7 = "infixOps_$0_7",
    infixOps_$0_8 = "infixOps_$0_8",
    infixOps_$0_9 = "infixOps_$0_9",
    infixOps_$0_10 = "infixOps_$0_10",
    infixOps_$0_11 = "infixOps_$0_11",
    infixOps_$0_12 = "infixOps_$0_12",
    functionCall = "functionCall",
    parameterIndex = "parameterIndex",
    parameterIndex_$0 = "parameterIndex_$0",
    literalIndex = "literalIndex",
    literalIndex_$0 = "literalIndex_$0",
    methodInvoke = "methodInvoke",
    forLoop = "forLoop",
    objectIndex = "objectIndex",
    objectIndex_$0_1 = "objectIndex_$0_1",
    objectIndex_$0_2 = "objectIndex_$0_2",
    ret = "ret",
    ret_$0 = "ret_$0",
    func = "func",
    params = "params",
    params_$0 = "params_$0",
    params_$0_$0 = "params_$0_$0",
    params_$1 = "params_$1",
    params_$1_$0 = "params_$1_$0",
    args = "args",
    args_$0 = "args_$0",
    args_$1 = "args_$1",
    assignment = "assignment",
    conditionalExec = "conditionalExec",
    ifs = "ifs",
    ifs_$0 = "ifs_$0",
    ifs_$1 = "ifs_$1",
    ifs_$2 = "ifs_$2",
    elif = "elif",
    elif_$0 = "elif_$0",
    otherwise = "otherwise",
    str_t = "str_t",
    int_t = "int_t",
    double_t = "double_t",
    bool_t = "bool_t",
    any_t = "any_t",
    object_t = "object_t",
    field_t = "field_t",
    array_t = "array_t",
    optional_t = "optional_t",
    typePostfix = "typePostfix",
    typePostfix_$0_1 = "typePostfix_$0_1",
    typePostfix_$0_2 = "typePostfix_$0_2",
    someType = "someType",
    someType_$0_1 = "someType_$0_1",
    someType_$0_2 = "someType_$0_2",
    someType_$0_3 = "someType_$0_3",
    someType_$0_4 = "someType_$0_4",
    someType_$0_5 = "someType_$0_5",
    someType_$0_6 = "someType_$0_6",
    schema = "schema",
    schema_$0_1 = "schema_$0_1",
    schema_$0_2 = "schema_$0_2",
    typeDef = "typeDef",
}
export type globals = globals_$0[];
export interface globals_$0 {
    kind: ASTKinds.globals_$0;
    value: globals_$0_$0;
}
export type globals_$0_$0 = globals_$0_$0_1 | globals_$0_$0_2 | globals_$0_$0_3;
export type globals_$0_$0_1 = varDecl;
export type globals_$0_$0_2 = func;
export type globals_$0_$0_3 = typeDef;
export type globals_$0_$1 = globals_$0_$1_1 | globals_$0_$1_2;
export type globals_$0_$1_1 = ws[];
export type globals_$0_$1_2 = string;
export type mutable = string;
export type constant = string;
export interface varDecl {
    kind: ASTKinds.varDecl;
    mutability: varDecl_$0;
    name: name;
    value: expression;
}
export type varDecl_$0 = varDecl_$0_1 | varDecl_$0_2;
export type varDecl_$0_1 = constant;
export type varDecl_$0_2 = mutable;
export interface name {
    kind: ASTKinds.name;
    name: string;
}
export type equals = string;
export type ws = string;
export interface obj {
    kind: ASTKinds.obj;
    fields: fields;
}
export interface str {
    kind: ASTKinds.str;
    value: string;
}
export interface bool {
    kind: ASTKinds.bool;
    value: bool_$0;
}
export type bool_$0 = bool_$0_1 | bool_$0_2;
export type bool_$0_1 = string;
export type bool_$0_2 = string;
export interface num {
    kind: ASTKinds.num;
    value: string;
}
export interface none {
    kind: ASTKinds.none;
}
export interface array {
    kind: ASTKinds.array;
    values: array_$0[];
}
export interface array_$0 {
    kind: ASTKinds.array_$0;
    value: expression;
}
export type literal = literal_1 | literal_2 | literal_3 | literal_4 | literal_5 | literal_6;
export type literal_1 = obj;
export type literal_2 = str;
export type literal_3 = bool;
export type literal_4 = num;
export type literal_5 = none;
export type literal_6 = array;
export type newLineOrComma = string;
export interface field {
    kind: ASTKinds.field;
    name: name;
    value: literal;
}
export interface fields {
    kind: ASTKinds.fields;
    value: field[];
}
export type space = string;
export interface scopedExecution {
    kind: ASTKinds.scopedExecution;
    body: executable;
}
export interface executable {
    kind: ASTKinds.executable;
    value: executable_$0[];
}
export interface executable_$0 {
    kind: ASTKinds.executable_$0;
    value: executable_$0_$0;
}
export type executable_$0_$0 = executable_$0_$0_1 | executable_$0_$0_2 | executable_$0_$0_3 | executable_$0_$0_4 | executable_$0_$0_5 | executable_$0_$0_6 | executable_$0_$0_7;
export type executable_$0_$0_1 = ret;
export type executable_$0_$0_2 = varDecl;
export type executable_$0_$0_3 = forLoop;
export type executable_$0_$0_4 = ifs;
export type executable_$0_$0_5 = assignment;
export type executable_$0_$0_6 = functionCall;
export type executable_$0_$0_7 = expression;
export interface expression {
    kind: ASTKinds.expression;
    prefix: Nullable<expression_$0>;
    root: expression_$1;
    methods: expression_$2[];
    infix: Nullable<expression_$3>;
}
export type expression_$0 = prefixOps;
export type expression_$1 = expression_$1_1 | expression_$1_2;
export type expression_$1_1 = literal;
export type expression_$1_2 = name;
export type expression_$2 = method;
export interface expression_$3 {
    kind: ASTKinds.expression_$3;
    sign: infixOps;
    arg: expression;
}
export interface method {
    kind: ASTKinds.method;
    method: method_$0;
}
export type method_$0 = method_$0_1 | method_$0_2 | method_$0_3;
export type method_$0_1 = parameterIndex;
export type method_$0_2 = methodInvoke;
export type method_$0_3 = literalIndex;
export interface not {
    kind: ASTKinds.not;
}
export interface minus {
    kind: ASTKinds.minus;
}
export interface prefixOps {
    kind: ASTKinds.prefixOps;
    op: prefixOps_$0;
}
export type prefixOps_$0 = prefixOps_$0_1 | prefixOps_$0_2;
export type prefixOps_$0_1 = not;
export type prefixOps_$0_2 = minus;
export interface mult {
    kind: ASTKinds.mult;
}
export interface plus {
    kind: ASTKinds.plus;
}
export interface divide {
    kind: ASTKinds.divide;
}
export interface eq {
    kind: ASTKinds.eq;
}
export interface neq {
    kind: ASTKinds.neq;
}
export interface geq {
    kind: ASTKinds.geq;
}
export interface gt {
    kind: ASTKinds.gt;
}
export interface lt {
    kind: ASTKinds.lt;
}
export interface leq {
    kind: ASTKinds.leq;
}
export interface and {
    kind: ASTKinds.and;
}
export interface or {
    kind: ASTKinds.or;
}
export interface infixOps {
    kind: ASTKinds.infixOps;
    op: infixOps_$0;
}
export type infixOps_$0 = infixOps_$0_1 | infixOps_$0_2 | infixOps_$0_3 | infixOps_$0_4 | infixOps_$0_5 | infixOps_$0_6 | infixOps_$0_7 | infixOps_$0_8 | infixOps_$0_9 | infixOps_$0_10 | infixOps_$0_11 | infixOps_$0_12;
export type infixOps_$0_1 = plus;
export type infixOps_$0_2 = minus;
export type infixOps_$0_3 = mult;
export type infixOps_$0_4 = divide;
export type infixOps_$0_5 = eq;
export type infixOps_$0_6 = neq;
export type infixOps_$0_7 = leq;
export type infixOps_$0_8 = geq;
export type infixOps_$0_9 = gt;
export type infixOps_$0_10 = lt;
export type infixOps_$0_11 = and;
export type infixOps_$0_12 = or;
export interface functionCall {
    kind: ASTKinds.functionCall;
    name: name;
    args: args;
}
export interface parameterIndex {
    kind: ASTKinds.parameterIndex;
    value: parameterIndex_$0;
}
export type parameterIndex_$0 = expression;
export interface literalIndex {
    kind: ASTKinds.literalIndex;
    value: literalIndex_$0;
}
export type literalIndex_$0 = name;
export interface methodInvoke {
    kind: ASTKinds.methodInvoke;
    name: name;
    args: args;
}
export interface forLoop {
    kind: ASTKinds.forLoop;
    rowVar: name;
    value: expression;
    do: scopedExecution;
}
export interface objectIndex {
    kind: ASTKinds.objectIndex;
    obj: expression;
    index: objectIndex_$0;
}
export type objectIndex_$0 = objectIndex_$0_1 | objectIndex_$0_2;
export type objectIndex_$0_1 = parameterIndex;
export type objectIndex_$0_2 = literalIndex;
export interface ret {
    kind: ASTKinds.ret;
    value: Nullable<ret_$0>;
}
export interface ret_$0 {
    kind: ASTKinds.ret_$0;
    exp: expression;
}
export interface func {
    kind: ASTKinds.func;
    name: name;
    params: params;
    body: scopedExecution;
}
export interface params {
    kind: ASTKinds.params;
    leadingParams: params_$0[];
    lastParam: Nullable<params_$1>;
}
export interface params_$0 {
    kind: ASTKinds.params_$0;
    name: name;
    schema: Nullable<params_$0_$0>;
}
export type params_$0_$0 = schema;
export interface params_$1 {
    kind: ASTKinds.params_$1;
    name: name;
    schema: Nullable<params_$1_$0>;
}
export type params_$1_$0 = schema;
export interface args {
    kind: ASTKinds.args;
    leadingArgs: args_$0[];
    lastArg: Nullable<args_$1>;
}
export interface args_$0 {
    kind: ASTKinds.args_$0;
    value: expression;
}
export type args_$1 = expression;
export interface assignment {
    kind: ASTKinds.assignment;
    target: expression;
    value: expression;
}
export interface conditionalExec {
    kind: ASTKinds.conditionalExec;
    cond: expression;
    do: scopedExecution;
}
export interface ifs {
    kind: ASTKinds.ifs;
    if_this: ifs_$0;
    elifs: ifs_$1[];
    otherwise: Nullable<ifs_$2>;
}
export type ifs_$0 = conditionalExec;
export type ifs_$1 = elif;
export type ifs_$2 = otherwise;
export interface elif {
    kind: ASTKinds.elif;
    else_this: elif_$0;
}
export type elif_$0 = conditionalExec;
export interface otherwise {
    kind: ASTKinds.otherwise;
    do: scopedExecution;
}
export interface str_t {
    kind: ASTKinds.str_t;
}
export interface int_t {
    kind: ASTKinds.int_t;
}
export interface double_t {
    kind: ASTKinds.double_t;
}
export interface bool_t {
    kind: ASTKinds.bool_t;
}
export interface any_t {
    kind: ASTKinds.any_t;
}
export interface object_t {
    kind: ASTKinds.object_t;
    fields: field_t[];
}
export interface field_t {
    kind: ASTKinds.field_t;
    name: name;
    schema: someType;
}
export interface array_t {
    kind: ASTKinds.array_t;
}
export interface optional_t {
    kind: ASTKinds.optional_t;
}
export interface typePostfix {
    kind: ASTKinds.typePostfix;
    mod: typePostfix_$0;
}
export type typePostfix_$0 = typePostfix_$0_1 | typePostfix_$0_2;
export type typePostfix_$0_1 = array_t;
export type typePostfix_$0_2 = optional_t;
export interface someType {
    kind: ASTKinds.someType;
    type: someType_$0;
    postfix: Nullable<typePostfix>;
}
export type someType_$0 = someType_$0_1 | someType_$0_2 | someType_$0_3 | someType_$0_4 | someType_$0_5 | someType_$0_6;
export type someType_$0_1 = str_t;
export type someType_$0_2 = int_t;
export type someType_$0_3 = double_t;
export type someType_$0_4 = bool_t;
export type someType_$0_5 = any_t;
export type someType_$0_6 = object_t;
export interface schema {
    kind: ASTKinds.schema;
    type: schema_$0;
    postfix: Nullable<typePostfix>;
}
export type schema_$0 = schema_$0_1 | schema_$0_2;
export type schema_$0_1 = someType;
export type schema_$0_2 = name;
export interface typeDef {
    kind: ASTKinds.typeDef;
    name: name;
    def: someType;
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public matchglobals($$dpth: number, $$cr?: ContextRecorder): Nullable<globals> {
        return this.loop<globals_$0>(() => this.matchglobals_$0($$dpth + 1, $$cr), true);
    }
    public matchglobals_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<globals_$0> {
        return this.runner<globals_$0>($$dpth,
            (log) => {
                if (log) {
                    log("globals_$0");
                }
                let $scope$value: Nullable<globals_$0_$0>;
                let $$res: Nullable<globals_$0> = null;
                if (true
                    && ($scope$value = this.matchglobals_$0_$0($$dpth + 1, $$cr)) !== null
                    && this.matchglobals_$0_$1($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.globals_$0, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchglobals_$0_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<globals_$0_$0> {
        return this.choice<globals_$0_$0>([
            () => this.matchglobals_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchglobals_$0_$0_2($$dpth + 1, $$cr),
            () => this.matchglobals_$0_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchglobals_$0_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<globals_$0_$0_1> {
        return this.matchvarDecl($$dpth + 1, $$cr);
    }
    public matchglobals_$0_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<globals_$0_$0_2> {
        return this.matchfunc($$dpth + 1, $$cr);
    }
    public matchglobals_$0_$0_3($$dpth: number, $$cr?: ContextRecorder): Nullable<globals_$0_$0_3> {
        return this.matchtypeDef($$dpth + 1, $$cr);
    }
    public matchglobals_$0_$1($$dpth: number, $$cr?: ContextRecorder): Nullable<globals_$0_$1> {
        return this.choice<globals_$0_$1>([
            () => this.matchglobals_$0_$1_1($$dpth + 1, $$cr),
            () => this.matchglobals_$0_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchglobals_$0_$1_1($$dpth: number, $$cr?: ContextRecorder): Nullable<globals_$0_$1_1> {
        return this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), false);
    }
    public matchglobals_$0_$1_2($$dpth: number, $$cr?: ContextRecorder): Nullable<globals_$0_$1_2> {
        return this.regexAccept(String.raw`(?:$)`, $$dpth + 1, $$cr);
    }
    public matchmutable($$dpth: number, $$cr?: ContextRecorder): Nullable<mutable> {
        return this.regexAccept(String.raw`(?:let)`, $$dpth + 1, $$cr);
    }
    public matchconstant($$dpth: number, $$cr?: ContextRecorder): Nullable<constant> {
        return this.regexAccept(String.raw`(?:const)`, $$dpth + 1, $$cr);
    }
    public matchvarDecl($$dpth: number, $$cr?: ContextRecorder): Nullable<varDecl> {
        return this.runner<varDecl>($$dpth,
            (log) => {
                if (log) {
                    log("varDecl");
                }
                let $scope$mutability: Nullable<varDecl_$0>;
                let $scope$name: Nullable<name>;
                let $scope$value: Nullable<expression>;
                let $$res: Nullable<varDecl> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && ($scope$mutability = this.matchvarDecl_$0($$dpth + 1, $$cr)) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), false) !== null
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.matchequals($$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && ($scope$value = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.varDecl, mutability: $scope$mutability, name: $scope$name, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchvarDecl_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<varDecl_$0> {
        return this.choice<varDecl_$0>([
            () => this.matchvarDecl_$0_1($$dpth + 1, $$cr),
            () => this.matchvarDecl_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchvarDecl_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<varDecl_$0_1> {
        return this.matchconstant($$dpth + 1, $$cr);
    }
    public matchvarDecl_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<varDecl_$0_2> {
        return this.matchmutable($$dpth + 1, $$cr);
    }
    public matchname($$dpth: number, $$cr?: ContextRecorder): Nullable<name> {
        return this.runner<name>($$dpth,
            (log) => {
                if (log) {
                    log("name");
                }
                let $scope$name: Nullable<string>;
                let $$res: Nullable<name> = null;
                if (true
                    && ($scope$name = this.regexAccept(String.raw`(?:[a-zA-Z]+\w*)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.name, name: $scope$name};
                }
                return $$res;
            }, $$cr)();
    }
    public matchequals($$dpth: number, $$cr?: ContextRecorder): Nullable<equals> {
        return this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr);
    }
    public matchws($$dpth: number, $$cr?: ContextRecorder): Nullable<ws> {
        return this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr);
    }
    public matchobj($$dpth: number, $$cr?: ContextRecorder): Nullable<obj> {
        return this.runner<obj>($$dpth,
            (log) => {
                if (log) {
                    log("obj");
                }
                let $scope$fields: Nullable<fields>;
                let $$res: Nullable<obj> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\{)`, $$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && ($scope$fields = this.matchfields($$dpth + 1, $$cr)) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.obj, fields: $scope$fields};
                }
                return $$res;
            }, $$cr)();
    }
    public matchstr($$dpth: number, $$cr?: ContextRecorder): Nullable<str> {
        return this.runner<str>($$dpth,
            (log) => {
                if (log) {
                    log("str");
                }
                let $scope$value: Nullable<string>;
                let $$res: Nullable<str> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                    && ($scope$value = this.regexAccept(String.raw`(?:[\w \t]*)`, $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\')`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.str, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchbool($$dpth: number, $$cr?: ContextRecorder): Nullable<bool> {
        return this.runner<bool>($$dpth,
            (log) => {
                if (log) {
                    log("bool");
                }
                let $scope$value: Nullable<bool_$0>;
                let $$res: Nullable<bool> = null;
                if (true
                    && ($scope$value = this.matchbool_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.bool, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchbool_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<bool_$0> {
        return this.choice<bool_$0>([
            () => this.matchbool_$0_1($$dpth + 1, $$cr),
            () => this.matchbool_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchbool_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<bool_$0_1> {
        return this.regexAccept(String.raw`(?:true)`, $$dpth + 1, $$cr);
    }
    public matchbool_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<bool_$0_2> {
        return this.regexAccept(String.raw`(?:false)`, $$dpth + 1, $$cr);
    }
    public matchnum($$dpth: number, $$cr?: ContextRecorder): Nullable<num> {
        return this.runner<num>($$dpth,
            (log) => {
                if (log) {
                    log("num");
                }
                let $scope$value: Nullable<string>;
                let $$res: Nullable<num> = null;
                if (true
                    && ($scope$value = this.regexAccept(String.raw`(?:-?\d+(\.\d+)?)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.num, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchnone($$dpth: number, $$cr?: ContextRecorder): Nullable<none> {
        return this.runner<none>($$dpth,
            (log) => {
                if (log) {
                    log("none");
                }
                let $$res: Nullable<none> = null;
                if (true
                    && this.regexAccept(String.raw`(?:none)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:(?=(\s|})))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.none, };
                }
                return $$res;
            }, $$cr)();
    }
    public matcharray($$dpth: number, $$cr?: ContextRecorder): Nullable<array> {
        return this.runner<array>($$dpth,
            (log) => {
                if (log) {
                    log("array");
                }
                let $scope$values: Nullable<array_$0[]>;
                let $$res: Nullable<array> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && ($scope$values = this.loop<array_$0>(() => this.matcharray_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.array, values: $scope$values};
                }
                return $$res;
            }, $$cr)();
    }
    public matcharray_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<array_$0> {
        return this.runner<array_$0>($$dpth,
            (log) => {
                if (log) {
                    log("array_$0");
                }
                let $scope$value: Nullable<expression>;
                let $$res: Nullable<array_$0> = null;
                if (true
                    && ($scope$value = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:(\n|,|(?=\])))`, $$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.array_$0, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchliteral($$dpth: number, $$cr?: ContextRecorder): Nullable<literal> {
        return this.choice<literal>([
            () => this.matchliteral_1($$dpth + 1, $$cr),
            () => this.matchliteral_2($$dpth + 1, $$cr),
            () => this.matchliteral_3($$dpth + 1, $$cr),
            () => this.matchliteral_4($$dpth + 1, $$cr),
            () => this.matchliteral_5($$dpth + 1, $$cr),
            () => this.matchliteral_6($$dpth + 1, $$cr),
        ]);
    }
    public matchliteral_1($$dpth: number, $$cr?: ContextRecorder): Nullable<literal_1> {
        return this.matchobj($$dpth + 1, $$cr);
    }
    public matchliteral_2($$dpth: number, $$cr?: ContextRecorder): Nullable<literal_2> {
        return this.matchstr($$dpth + 1, $$cr);
    }
    public matchliteral_3($$dpth: number, $$cr?: ContextRecorder): Nullable<literal_3> {
        return this.matchbool($$dpth + 1, $$cr);
    }
    public matchliteral_4($$dpth: number, $$cr?: ContextRecorder): Nullable<literal_4> {
        return this.matchnum($$dpth + 1, $$cr);
    }
    public matchliteral_5($$dpth: number, $$cr?: ContextRecorder): Nullable<literal_5> {
        return this.matchnone($$dpth + 1, $$cr);
    }
    public matchliteral_6($$dpth: number, $$cr?: ContextRecorder): Nullable<literal_6> {
        return this.matcharray($$dpth + 1, $$cr);
    }
    public matchnewLineOrComma($$dpth: number, $$cr?: ContextRecorder): Nullable<newLineOrComma> {
        return this.regexAccept(String.raw`(?:\n|,)`, $$dpth + 1, $$cr);
    }
    public matchfield($$dpth: number, $$cr?: ContextRecorder): Nullable<field> {
        return this.runner<field>($$dpth,
            (log) => {
                if (log) {
                    log("field");
                }
                let $scope$name: Nullable<name>;
                let $scope$value: Nullable<literal>;
                let $$res: Nullable<field> = null;
                if (true
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchliteral($$dpth + 1, $$cr)) !== null
                    && ((this.matchnewLineOrComma($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.field, name: $scope$name, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchfields($$dpth: number, $$cr?: ContextRecorder): Nullable<fields> {
        return this.runner<fields>($$dpth,
            (log) => {
                if (log) {
                    log("fields");
                }
                let $scope$value: Nullable<field[]>;
                let $$res: Nullable<fields> = null;
                if (true
                    && ($scope$value = this.loop<field>(() => this.matchfield($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchspace($$dpth: number, $$cr?: ContextRecorder): Nullable<space> {
        return this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr);
    }
    public matchscopedExecution($$dpth: number, $$cr?: ContextRecorder): Nullable<scopedExecution> {
        return this.runner<scopedExecution>($$dpth,
            (log) => {
                if (log) {
                    log("scopedExecution");
                }
                let $scope$body: Nullable<executable>;
                let $$res: Nullable<scopedExecution> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$body = this.matchexecutable($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*\})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.scopedExecution, body: $scope$body};
                }
                return $$res;
            }, $$cr)();
    }
    public matchexecutable($$dpth: number, $$cr?: ContextRecorder): Nullable<executable> {
        return this.runner<executable>($$dpth,
            (log) => {
                if (log) {
                    log("executable");
                }
                let $scope$value: Nullable<executable_$0[]>;
                let $$res: Nullable<executable> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && ($scope$value = this.loop<executable_$0>(() => this.matchexecutable_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.executable, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchexecutable_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<executable_$0> {
        return this.runner<executable_$0>($$dpth,
            (log) => {
                if (log) {
                    log("executable_$0");
                }
                let $scope$value: Nullable<executable_$0_$0>;
                let $$res: Nullable<executable_$0> = null;
                if (true
                    && ($scope$value = this.matchexecutable_$0_$0($$dpth + 1, $$cr)) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), false) !== null
                ) {
                    $$res = {kind: ASTKinds.executable_$0, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchexecutable_$0_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<executable_$0_$0> {
        return this.choice<executable_$0_$0>([
            () => this.matchexecutable_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchexecutable_$0_$0_2($$dpth + 1, $$cr),
            () => this.matchexecutable_$0_$0_3($$dpth + 1, $$cr),
            () => this.matchexecutable_$0_$0_4($$dpth + 1, $$cr),
            () => this.matchexecutable_$0_$0_5($$dpth + 1, $$cr),
            () => this.matchexecutable_$0_$0_6($$dpth + 1, $$cr),
            () => this.matchexecutable_$0_$0_7($$dpth + 1, $$cr),
        ]);
    }
    public matchexecutable_$0_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<executable_$0_$0_1> {
        return this.matchret($$dpth + 1, $$cr);
    }
    public matchexecutable_$0_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<executable_$0_$0_2> {
        return this.matchvarDecl($$dpth + 1, $$cr);
    }
    public matchexecutable_$0_$0_3($$dpth: number, $$cr?: ContextRecorder): Nullable<executable_$0_$0_3> {
        return this.matchforLoop($$dpth + 1, $$cr);
    }
    public matchexecutable_$0_$0_4($$dpth: number, $$cr?: ContextRecorder): Nullable<executable_$0_$0_4> {
        return this.matchifs($$dpth + 1, $$cr);
    }
    public matchexecutable_$0_$0_5($$dpth: number, $$cr?: ContextRecorder): Nullable<executable_$0_$0_5> {
        return this.matchassignment($$dpth + 1, $$cr);
    }
    public matchexecutable_$0_$0_6($$dpth: number, $$cr?: ContextRecorder): Nullable<executable_$0_$0_6> {
        return this.matchfunctionCall($$dpth + 1, $$cr);
    }
    public matchexecutable_$0_$0_7($$dpth: number, $$cr?: ContextRecorder): Nullable<executable_$0_$0_7> {
        return this.matchexpression($$dpth + 1, $$cr);
    }
    public matchexpression($$dpth: number, $$cr?: ContextRecorder): Nullable<expression> {
        return this.runner<expression>($$dpth,
            (log) => {
                if (log) {
                    log("expression");
                }
                let $scope$prefix: Nullable<Nullable<expression_$0>>;
                let $scope$root: Nullable<expression_$1>;
                let $scope$methods: Nullable<expression_$2[]>;
                let $scope$infix: Nullable<Nullable<expression_$3>>;
                let $$res: Nullable<expression> = null;
                if (true
                    && (($scope$prefix = this.matchexpression_$0($$dpth + 1, $$cr)) || true)
                    && ($scope$root = this.matchexpression_$1($$dpth + 1, $$cr)) !== null
                    && ($scope$methods = this.loop<expression_$2>(() => this.matchexpression_$2($$dpth + 1, $$cr), true)) !== null
                    && (($scope$infix = this.matchexpression_$3($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.expression, prefix: $scope$prefix, root: $scope$root, methods: $scope$methods, infix: $scope$infix};
                }
                return $$res;
            }, $$cr)();
    }
    public matchexpression_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<expression_$0> {
        return this.matchprefixOps($$dpth + 1, $$cr);
    }
    public matchexpression_$1($$dpth: number, $$cr?: ContextRecorder): Nullable<expression_$1> {
        return this.choice<expression_$1>([
            () => this.matchexpression_$1_1($$dpth + 1, $$cr),
            () => this.matchexpression_$1_2($$dpth + 1, $$cr),
        ]);
    }
    public matchexpression_$1_1($$dpth: number, $$cr?: ContextRecorder): Nullable<expression_$1_1> {
        return this.matchliteral($$dpth + 1, $$cr);
    }
    public matchexpression_$1_2($$dpth: number, $$cr?: ContextRecorder): Nullable<expression_$1_2> {
        return this.matchname($$dpth + 1, $$cr);
    }
    public matchexpression_$2($$dpth: number, $$cr?: ContextRecorder): Nullable<expression_$2> {
        return this.matchmethod($$dpth + 1, $$cr);
    }
    public matchexpression_$3($$dpth: number, $$cr?: ContextRecorder): Nullable<expression_$3> {
        return this.runner<expression_$3>($$dpth,
            (log) => {
                if (log) {
                    log("expression_$3");
                }
                let $scope$sign: Nullable<infixOps>;
                let $scope$arg: Nullable<expression>;
                let $$res: Nullable<expression_$3> = null;
                if (true
                    && ($scope$sign = this.matchinfixOps($$dpth + 1, $$cr)) !== null
                    && ($scope$arg = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.expression_$3, sign: $scope$sign, arg: $scope$arg};
                }
                return $$res;
            }, $$cr)();
    }
    public matchmethod($$dpth: number, $$cr?: ContextRecorder): Nullable<method> {
        return this.runner<method>($$dpth,
            (log) => {
                if (log) {
                    log("method");
                }
                let $scope$method: Nullable<method_$0>;
                let $$res: Nullable<method> = null;
                if (true
                    && ($scope$method = this.matchmethod_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.method, method: $scope$method};
                }
                return $$res;
            }, $$cr)();
    }
    public matchmethod_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<method_$0> {
        return this.choice<method_$0>([
            () => this.matchmethod_$0_1($$dpth + 1, $$cr),
            () => this.matchmethod_$0_2($$dpth + 1, $$cr),
            () => this.matchmethod_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchmethod_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<method_$0_1> {
        return this.matchparameterIndex($$dpth + 1, $$cr);
    }
    public matchmethod_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<method_$0_2> {
        return this.matchmethodInvoke($$dpth + 1, $$cr);
    }
    public matchmethod_$0_3($$dpth: number, $$cr?: ContextRecorder): Nullable<method_$0_3> {
        return this.matchliteralIndex($$dpth + 1, $$cr);
    }
    public matchnot($$dpth: number, $$cr?: ContextRecorder): Nullable<not> {
        return this.runner<not>($$dpth,
            (log) => {
                if (log) {
                    log("not");
                }
                let $$res: Nullable<not> = null;
                if (true
                    && this.regexAccept(String.raw`(?:not)`, $$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), false) !== null
                ) {
                    $$res = {kind: ASTKinds.not, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchminus($$dpth: number, $$cr?: ContextRecorder): Nullable<minus> {
        return this.runner<minus>($$dpth,
            (log) => {
                if (log) {
                    log("minus");
                }
                let $$res: Nullable<minus> = null;
                if (true
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.minus, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchprefixOps($$dpth: number, $$cr?: ContextRecorder): Nullable<prefixOps> {
        return this.runner<prefixOps>($$dpth,
            (log) => {
                if (log) {
                    log("prefixOps");
                }
                let $scope$op: Nullable<prefixOps_$0>;
                let $$res: Nullable<prefixOps> = null;
                if (true
                    && ($scope$op = this.matchprefixOps_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.prefixOps, op: $scope$op};
                }
                return $$res;
            }, $$cr)();
    }
    public matchprefixOps_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<prefixOps_$0> {
        return this.choice<prefixOps_$0>([
            () => this.matchprefixOps_$0_1($$dpth + 1, $$cr),
            () => this.matchprefixOps_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchprefixOps_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<prefixOps_$0_1> {
        return this.matchnot($$dpth + 1, $$cr);
    }
    public matchprefixOps_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<prefixOps_$0_2> {
        return this.matchminus($$dpth + 1, $$cr);
    }
    public matchmult($$dpth: number, $$cr?: ContextRecorder): Nullable<mult> {
        return this.runner<mult>($$dpth,
            (log) => {
                if (log) {
                    log("mult");
                }
                let $$res: Nullable<mult> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\*)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.mult, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchplus($$dpth: number, $$cr?: ContextRecorder): Nullable<plus> {
        return this.runner<plus>($$dpth,
            (log) => {
                if (log) {
                    log("plus");
                }
                let $$res: Nullable<plus> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.plus, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchdivide($$dpth: number, $$cr?: ContextRecorder): Nullable<divide> {
        return this.runner<divide>($$dpth,
            (log) => {
                if (log) {
                    log("divide");
                }
                let $$res: Nullable<divide> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\/)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.divide, };
                }
                return $$res;
            }, $$cr)();
    }
    public matcheq($$dpth: number, $$cr?: ContextRecorder): Nullable<eq> {
        return this.runner<eq>($$dpth,
            (log) => {
                if (log) {
                    log("eq");
                }
                let $$res: Nullable<eq> = null;
                if (true
                    && this.regexAccept(String.raw`(?:==)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.eq, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchneq($$dpth: number, $$cr?: ContextRecorder): Nullable<neq> {
        return this.runner<neq>($$dpth,
            (log) => {
                if (log) {
                    log("neq");
                }
                let $$res: Nullable<neq> = null;
                if (true
                    && this.regexAccept(String.raw`(?:!=)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.neq, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchgeq($$dpth: number, $$cr?: ContextRecorder): Nullable<geq> {
        return this.runner<geq>($$dpth,
            (log) => {
                if (log) {
                    log("geq");
                }
                let $$res: Nullable<geq> = null;
                if (true
                    && this.regexAccept(String.raw`(?:>=)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.geq, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchgt($$dpth: number, $$cr?: ContextRecorder): Nullable<gt> {
        return this.runner<gt>($$dpth,
            (log) => {
                if (log) {
                    log("gt");
                }
                let $$res: Nullable<gt> = null;
                if (true
                    && this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.gt, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchlt($$dpth: number, $$cr?: ContextRecorder): Nullable<lt> {
        return this.runner<lt>($$dpth,
            (log) => {
                if (log) {
                    log("lt");
                }
                let $$res: Nullable<lt> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.lt, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchleq($$dpth: number, $$cr?: ContextRecorder): Nullable<leq> {
        return this.runner<leq>($$dpth,
            (log) => {
                if (log) {
                    log("leq");
                }
                let $$res: Nullable<leq> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<=)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.leq, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchand($$dpth: number, $$cr?: ContextRecorder): Nullable<and> {
        return this.runner<and>($$dpth,
            (log) => {
                if (log) {
                    log("and");
                }
                let $$res: Nullable<and> = null;
                if (true
                    && this.regexAccept(String.raw`(?:and)`, $$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), false) !== null
                ) {
                    $$res = {kind: ASTKinds.and, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchor($$dpth: number, $$cr?: ContextRecorder): Nullable<or> {
        return this.runner<or>($$dpth,
            (log) => {
                if (log) {
                    log("or");
                }
                let $$res: Nullable<or> = null;
                if (true
                    && this.regexAccept(String.raw`(?:or)`, $$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), false) !== null
                ) {
                    $$res = {kind: ASTKinds.or, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchinfixOps($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps> {
        return this.runner<infixOps>($$dpth,
            (log) => {
                if (log) {
                    log("infixOps");
                }
                let $scope$op: Nullable<infixOps_$0>;
                let $$res: Nullable<infixOps> = null;
                if (true
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && ($scope$op = this.matchinfixOps_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.infixOps, op: $scope$op};
                }
                return $$res;
            }, $$cr)();
    }
    public matchinfixOps_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0> {
        return this.choice<infixOps_$0>([
            () => this.matchinfixOps_$0_1($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_2($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_3($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_4($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_5($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_6($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_7($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_8($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_9($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_10($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_11($$dpth + 1, $$cr),
            () => this.matchinfixOps_$0_12($$dpth + 1, $$cr),
        ]);
    }
    public matchinfixOps_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_1> {
        return this.matchplus($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_2> {
        return this.matchminus($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_3($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_3> {
        return this.matchmult($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_4($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_4> {
        return this.matchdivide($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_5($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_5> {
        return this.matcheq($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_6($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_6> {
        return this.matchneq($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_7($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_7> {
        return this.matchleq($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_8($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_8> {
        return this.matchgeq($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_9($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_9> {
        return this.matchgt($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_10($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_10> {
        return this.matchlt($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_11($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_11> {
        return this.matchand($$dpth + 1, $$cr);
    }
    public matchinfixOps_$0_12($$dpth: number, $$cr?: ContextRecorder): Nullable<infixOps_$0_12> {
        return this.matchor($$dpth + 1, $$cr);
    }
    public matchfunctionCall($$dpth: number, $$cr?: ContextRecorder): Nullable<functionCall> {
        return this.runner<functionCall>($$dpth,
            (log) => {
                if (log) {
                    log("functionCall");
                }
                let $scope$name: Nullable<name>;
                let $scope$args: Nullable<args>;
                let $$res: Nullable<functionCall> = null;
                if (true
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && ($scope$args = this.matchargs($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.functionCall, name: $scope$name, args: $scope$args};
                }
                return $$res;
            }, $$cr)();
    }
    public matchparameterIndex($$dpth: number, $$cr?: ContextRecorder): Nullable<parameterIndex> {
        return this.runner<parameterIndex>($$dpth,
            (log) => {
                if (log) {
                    log("parameterIndex");
                }
                let $scope$value: Nullable<parameterIndex_$0>;
                let $$res: Nullable<parameterIndex> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && ($scope$value = this.matchparameterIndex_$0($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.parameterIndex, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchparameterIndex_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<parameterIndex_$0> {
        return this.matchexpression($$dpth + 1, $$cr);
    }
    public matchliteralIndex($$dpth: number, $$cr?: ContextRecorder): Nullable<literalIndex> {
        return this.runner<literalIndex>($$dpth,
            (log) => {
                if (log) {
                    log("literalIndex");
                }
                let $scope$value: Nullable<literalIndex_$0>;
                let $$res: Nullable<literalIndex> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchliteralIndex_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.literalIndex, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchliteralIndex_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<literalIndex_$0> {
        return this.matchname($$dpth + 1, $$cr);
    }
    public matchmethodInvoke($$dpth: number, $$cr?: ContextRecorder): Nullable<methodInvoke> {
        return this.runner<methodInvoke>($$dpth,
            (log) => {
                if (log) {
                    log("methodInvoke");
                }
                let $scope$name: Nullable<name>;
                let $scope$args: Nullable<args>;
                let $$res: Nullable<methodInvoke> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && ($scope$args = this.matchargs($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.methodInvoke, name: $scope$name, args: $scope$args};
                }
                return $$res;
            }, $$cr)();
    }
    public matchforLoop($$dpth: number, $$cr?: ContextRecorder): Nullable<forLoop> {
        return this.runner<forLoop>($$dpth,
            (log) => {
                if (log) {
                    log("forLoop");
                }
                let $scope$rowVar: Nullable<name>;
                let $scope$value: Nullable<expression>;
                let $scope$do: Nullable<scopedExecution>;
                let $$res: Nullable<forLoop> = null;
                if (true
                    && this.regexAccept(String.raw`(?:for)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$rowVar = this.matchname($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && this.regexAccept(String.raw`(?:in)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$value = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && ($scope$do = this.matchscopedExecution($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.forLoop, rowVar: $scope$rowVar, value: $scope$value, do: $scope$do};
                }
                return $$res;
            }, $$cr)();
    }
    public matchobjectIndex($$dpth: number, $$cr?: ContextRecorder): Nullable<objectIndex> {
        return this.runner<objectIndex>($$dpth,
            (log) => {
                if (log) {
                    log("objectIndex");
                }
                let $scope$obj: Nullable<expression>;
                let $scope$index: Nullable<objectIndex_$0>;
                let $$res: Nullable<objectIndex> = null;
                if (true
                    && ($scope$obj = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && ($scope$index = this.matchobjectIndex_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.objectIndex, obj: $scope$obj, index: $scope$index};
                }
                return $$res;
            }, $$cr)();
    }
    public matchobjectIndex_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<objectIndex_$0> {
        return this.choice<objectIndex_$0>([
            () => this.matchobjectIndex_$0_1($$dpth + 1, $$cr),
            () => this.matchobjectIndex_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchobjectIndex_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<objectIndex_$0_1> {
        return this.matchparameterIndex($$dpth + 1, $$cr);
    }
    public matchobjectIndex_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<objectIndex_$0_2> {
        return this.matchliteralIndex($$dpth + 1, $$cr);
    }
    public matchret($$dpth: number, $$cr?: ContextRecorder): Nullable<ret> {
        return this.runner<ret>($$dpth,
            (log) => {
                if (log) {
                    log("ret");
                }
                let $scope$value: Nullable<Nullable<ret_$0>>;
                let $$res: Nullable<ret> = null;
                if (true
                    && this.regexAccept(String.raw`(?:return(?=\s))`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && (($scope$value = this.matchret_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.ret, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchret_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<ret_$0> {
        return this.runner<ret_$0>($$dpth,
            (log) => {
                if (log) {
                    log("ret_$0");
                }
                let $scope$exp: Nullable<expression>;
                let $$res: Nullable<ret_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:(?<= ))`, $$dpth + 1, $$cr) !== null
                    && ($scope$exp = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ret_$0, exp: $scope$exp};
                }
                return $$res;
            }, $$cr)();
    }
    public matchfunc($$dpth: number, $$cr?: ContextRecorder): Nullable<func> {
        return this.runner<func>($$dpth,
            (log) => {
                if (log) {
                    log("func");
                }
                let $scope$name: Nullable<name>;
                let $scope$params: Nullable<params>;
                let $scope$body: Nullable<scopedExecution>;
                let $$res: Nullable<func> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:pub)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && this.regexAccept(String.raw`(?:func)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && ($scope$params = this.matchparams($$dpth + 1, $$cr)) !== null
                    && ($scope$body = this.matchscopedExecution($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.func, name: $scope$name, params: $scope$params, body: $scope$body};
                }
                return $$res;
            }, $$cr)();
    }
    public matchparams($$dpth: number, $$cr?: ContextRecorder): Nullable<params> {
        return this.runner<params>($$dpth,
            (log) => {
                if (log) {
                    log("params");
                }
                let $scope$leadingParams: Nullable<params_$0[]>;
                let $scope$lastParam: Nullable<Nullable<params_$1>>;
                let $$res: Nullable<params> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && ($scope$leadingParams = this.loop<params_$0>(() => this.matchparams_$0($$dpth + 1, $$cr), true)) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && (($scope$lastParam = this.matchparams_$1($$dpth + 1, $$cr)) || true)
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.params, leadingParams: $scope$leadingParams, lastParam: $scope$lastParam};
                }
                return $$res;
            }, $$cr)();
    }
    public matchparams_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<params_$0> {
        return this.runner<params_$0>($$dpth,
            (log) => {
                if (log) {
                    log("params_$0");
                }
                let $scope$name: Nullable<name>;
                let $scope$schema: Nullable<Nullable<params_$0_$0>>;
                let $$res: Nullable<params_$0> = null;
                if (true
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && (($scope$schema = this.matchparams_$0_$0($$dpth + 1, $$cr)) || true)
                    && this.matchnewLineOrComma($$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.params_$0, name: $scope$name, schema: $scope$schema};
                }
                return $$res;
            }, $$cr)();
    }
    public matchparams_$0_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<params_$0_$0> {
        return this.matchschema($$dpth + 1, $$cr);
    }
    public matchparams_$1($$dpth: number, $$cr?: ContextRecorder): Nullable<params_$1> {
        return this.runner<params_$1>($$dpth,
            (log) => {
                if (log) {
                    log("params_$1");
                }
                let $scope$name: Nullable<name>;
                let $scope$schema: Nullable<Nullable<params_$1_$0>>;
                let $$res: Nullable<params_$1> = null;
                if (true
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && (($scope$schema = this.matchparams_$1_$0($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.params_$1, name: $scope$name, schema: $scope$schema};
                }
                return $$res;
            }, $$cr)();
    }
    public matchparams_$1_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<params_$1_$0> {
        return this.matchschema($$dpth + 1, $$cr);
    }
    public matchargs($$dpth: number, $$cr?: ContextRecorder): Nullable<args> {
        return this.runner<args>($$dpth,
            (log) => {
                if (log) {
                    log("args");
                }
                let $scope$leadingArgs: Nullable<args_$0[]>;
                let $scope$lastArg: Nullable<Nullable<args_$1>>;
                let $$res: Nullable<args> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && ($scope$leadingArgs = this.loop<args_$0>(() => this.matchargs_$0($$dpth + 1, $$cr), true)) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && (($scope$lastArg = this.matchargs_$1($$dpth + 1, $$cr)) || true)
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.args, leadingArgs: $scope$leadingArgs, lastArg: $scope$lastArg};
                }
                return $$res;
            }, $$cr)();
    }
    public matchargs_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<args_$0> {
        return this.runner<args_$0>($$dpth,
            (log) => {
                if (log) {
                    log("args_$0");
                }
                let $scope$value: Nullable<expression>;
                let $$res: Nullable<args_$0> = null;
                if (true
                    && ($scope$value = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && this.matchnewLineOrComma($$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.args_$0, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchargs_$1($$dpth: number, $$cr?: ContextRecorder): Nullable<args_$1> {
        return this.matchexpression($$dpth + 1, $$cr);
    }
    public matchassignment($$dpth: number, $$cr?: ContextRecorder): Nullable<assignment> {
        return this.runner<assignment>($$dpth,
            (log) => {
                if (log) {
                    log("assignment");
                }
                let $scope$target: Nullable<expression>;
                let $scope$value: Nullable<expression>;
                let $$res: Nullable<assignment> = null;
                if (true
                    && ($scope$target = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && this.matchequals($$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && ($scope$value = this.matchexpression($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.assignment, target: $scope$target, value: $scope$value};
                }
                return $$res;
            }, $$cr)();
    }
    public matchconditionalExec($$dpth: number, $$cr?: ContextRecorder): Nullable<conditionalExec> {
        return this.runner<conditionalExec>($$dpth,
            (log) => {
                if (log) {
                    log("conditionalExec");
                }
                let $scope$cond: Nullable<expression>;
                let $scope$do: Nullable<scopedExecution>;
                let $$res: Nullable<conditionalExec> = null;
                if (true
                    && ($scope$cond = this.matchexpression($$dpth + 1, $$cr)) !== null
                    && ($scope$do = this.matchscopedExecution($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.conditionalExec, cond: $scope$cond, do: $scope$do};
                }
                return $$res;
            }, $$cr)();
    }
    public matchifs($$dpth: number, $$cr?: ContextRecorder): Nullable<ifs> {
        return this.runner<ifs>($$dpth,
            (log) => {
                if (log) {
                    log("ifs");
                }
                let $scope$if_this: Nullable<ifs_$0>;
                let $scope$elifs: Nullable<ifs_$1[]>;
                let $scope$otherwise: Nullable<Nullable<ifs_$2>>;
                let $$res: Nullable<ifs> = null;
                if (true
                    && this.regexAccept(String.raw`(?:if)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$if_this = this.matchifs_$0($$dpth + 1, $$cr)) !== null
                    && ($scope$elifs = this.loop<ifs_$1>(() => this.matchifs_$1($$dpth + 1, $$cr), true)) !== null
                    && (($scope$otherwise = this.matchifs_$2($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.ifs, if_this: $scope$if_this, elifs: $scope$elifs, otherwise: $scope$otherwise};
                }
                return $$res;
            }, $$cr)();
    }
    public matchifs_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<ifs_$0> {
        return this.matchconditionalExec($$dpth + 1, $$cr);
    }
    public matchifs_$1($$dpth: number, $$cr?: ContextRecorder): Nullable<ifs_$1> {
        return this.matchelif($$dpth + 1, $$cr);
    }
    public matchifs_$2($$dpth: number, $$cr?: ContextRecorder): Nullable<ifs_$2> {
        return this.matchotherwise($$dpth + 1, $$cr);
    }
    public matchelif($$dpth: number, $$cr?: ContextRecorder): Nullable<elif> {
        return this.runner<elif>($$dpth,
            (log) => {
                if (log) {
                    log("elif");
                }
                let $scope$else_this: Nullable<elif_$0>;
                let $$res: Nullable<elif> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:else)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:if)`, $$dpth + 1, $$cr) !== null
                    && this.loop<space>(() => this.matchspace($$dpth + 1, $$cr), false) !== null
                    && ($scope$else_this = this.matchelif_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.elif, else_this: $scope$else_this};
                }
                return $$res;
            }, $$cr)();
    }
    public matchelif_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<elif_$0> {
        return this.matchconditionalExec($$dpth + 1, $$cr);
    }
    public matchotherwise($$dpth: number, $$cr?: ContextRecorder): Nullable<otherwise> {
        return this.runner<otherwise>($$dpth,
            (log) => {
                if (log) {
                    log("otherwise");
                }
                let $scope$do: Nullable<scopedExecution>;
                let $$res: Nullable<otherwise> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:else)`, $$dpth + 1, $$cr) !== null
                    && ($scope$do = this.matchscopedExecution($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.otherwise, do: $scope$do};
                }
                return $$res;
            }, $$cr)();
    }
    public matchstr_t($$dpth: number, $$cr?: ContextRecorder): Nullable<str_t> {
        return this.runner<str_t>($$dpth,
            (log) => {
                if (log) {
                    log("str_t");
                }
                let $$res: Nullable<str_t> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:string)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.str_t, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchint_t($$dpth: number, $$cr?: ContextRecorder): Nullable<int_t> {
        return this.runner<int_t>($$dpth,
            (log) => {
                if (log) {
                    log("int_t");
                }
                let $$res: Nullable<int_t> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:int)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.int_t, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchdouble_t($$dpth: number, $$cr?: ContextRecorder): Nullable<double_t> {
        return this.runner<double_t>($$dpth,
            (log) => {
                if (log) {
                    log("double_t");
                }
                let $$res: Nullable<double_t> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:double)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.double_t, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchbool_t($$dpth: number, $$cr?: ContextRecorder): Nullable<bool_t> {
        return this.runner<bool_t>($$dpth,
            (log) => {
                if (log) {
                    log("bool_t");
                }
                let $$res: Nullable<bool_t> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:bool)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.bool_t, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchany_t($$dpth: number, $$cr?: ContextRecorder): Nullable<any_t> {
        return this.runner<any_t>($$dpth,
            (log) => {
                if (log) {
                    log("any_t");
                }
                let $$res: Nullable<any_t> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:any)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.any_t, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchobject_t($$dpth: number, $$cr?: ContextRecorder): Nullable<object_t> {
        return this.runner<object_t>($$dpth,
            (log) => {
                if (log) {
                    log("object_t");
                }
                let $scope$fields: Nullable<field_t[]>;
                let $$res: Nullable<object_t> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$fields = this.loop<field_t>(() => this.matchfield_t($$dpth + 1, $$cr), true)) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.object_t, fields: $scope$fields};
                }
                return $$res;
            }, $$cr)();
    }
    public matchfield_t($$dpth: number, $$cr?: ContextRecorder): Nullable<field_t> {
        return this.runner<field_t>($$dpth,
            (log) => {
                if (log) {
                    log("field_t");
                }
                let $scope$name: Nullable<name>;
                let $scope$schema: Nullable<someType>;
                let $$res: Nullable<field_t> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$schema = this.matchsomeType($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:(,|\s|(?=})))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.field_t, name: $scope$name, schema: $scope$schema};
                }
                return $$res;
            }, $$cr)();
    }
    public matcharray_t($$dpth: number, $$cr?: ContextRecorder): Nullable<array_t> {
        return this.runner<array_t>($$dpth,
            (log) => {
                if (log) {
                    log("array_t");
                }
                let $$res: Nullable<array_t> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\[\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.array_t, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchoptional_t($$dpth: number, $$cr?: ContextRecorder): Nullable<optional_t> {
        return this.runner<optional_t>($$dpth,
            (log) => {
                if (log) {
                    log("optional_t");
                }
                let $$res: Nullable<optional_t> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:\?)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.optional_t, };
                }
                return $$res;
            }, $$cr)();
    }
    public matchtypePostfix($$dpth: number, $$cr?: ContextRecorder): Nullable<typePostfix> {
        return this.runner<typePostfix>($$dpth,
            (log) => {
                if (log) {
                    log("typePostfix");
                }
                let $scope$mod: Nullable<typePostfix_$0>;
                let $$res: Nullable<typePostfix> = null;
                if (true
                    && ($scope$mod = this.matchtypePostfix_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.typePostfix, mod: $scope$mod};
                }
                return $$res;
            }, $$cr)();
    }
    public matchtypePostfix_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<typePostfix_$0> {
        return this.choice<typePostfix_$0>([
            () => this.matchtypePostfix_$0_1($$dpth + 1, $$cr),
            () => this.matchtypePostfix_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchtypePostfix_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<typePostfix_$0_1> {
        return this.matcharray_t($$dpth + 1, $$cr);
    }
    public matchtypePostfix_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<typePostfix_$0_2> {
        return this.matchoptional_t($$dpth + 1, $$cr);
    }
    public matchsomeType($$dpth: number, $$cr?: ContextRecorder): Nullable<someType> {
        return this.runner<someType>($$dpth,
            (log) => {
                if (log) {
                    log("someType");
                }
                let $scope$type: Nullable<someType_$0>;
                let $scope$postfix: Nullable<Nullable<typePostfix>>;
                let $$res: Nullable<someType> = null;
                if (true
                    && ($scope$type = this.matchsomeType_$0($$dpth + 1, $$cr)) !== null
                    && (($scope$postfix = this.matchtypePostfix($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.someType, type: $scope$type, postfix: $scope$postfix};
                }
                return $$res;
            }, $$cr)();
    }
    public matchsomeType_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<someType_$0> {
        return this.choice<someType_$0>([
            () => this.matchsomeType_$0_1($$dpth + 1, $$cr),
            () => this.matchsomeType_$0_2($$dpth + 1, $$cr),
            () => this.matchsomeType_$0_3($$dpth + 1, $$cr),
            () => this.matchsomeType_$0_4($$dpth + 1, $$cr),
            () => this.matchsomeType_$0_5($$dpth + 1, $$cr),
            () => this.matchsomeType_$0_6($$dpth + 1, $$cr),
        ]);
    }
    public matchsomeType_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<someType_$0_1> {
        return this.matchstr_t($$dpth + 1, $$cr);
    }
    public matchsomeType_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<someType_$0_2> {
        return this.matchint_t($$dpth + 1, $$cr);
    }
    public matchsomeType_$0_3($$dpth: number, $$cr?: ContextRecorder): Nullable<someType_$0_3> {
        return this.matchdouble_t($$dpth + 1, $$cr);
    }
    public matchsomeType_$0_4($$dpth: number, $$cr?: ContextRecorder): Nullable<someType_$0_4> {
        return this.matchbool_t($$dpth + 1, $$cr);
    }
    public matchsomeType_$0_5($$dpth: number, $$cr?: ContextRecorder): Nullable<someType_$0_5> {
        return this.matchany_t($$dpth + 1, $$cr);
    }
    public matchsomeType_$0_6($$dpth: number, $$cr?: ContextRecorder): Nullable<someType_$0_6> {
        return this.matchobject_t($$dpth + 1, $$cr);
    }
    public matchschema($$dpth: number, $$cr?: ContextRecorder): Nullable<schema> {
        return this.runner<schema>($$dpth,
            (log) => {
                if (log) {
                    log("schema");
                }
                let $scope$type: Nullable<schema_$0>;
                let $scope$postfix: Nullable<Nullable<typePostfix>>;
                let $$res: Nullable<schema> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\s*:\s* )`, $$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchschema_$0($$dpth + 1, $$cr)) !== null
                    && (($scope$postfix = this.matchtypePostfix($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.schema, type: $scope$type, postfix: $scope$postfix};
                }
                return $$res;
            }, $$cr)();
    }
    public matchschema_$0($$dpth: number, $$cr?: ContextRecorder): Nullable<schema_$0> {
        return this.choice<schema_$0>([
            () => this.matchschema_$0_1($$dpth + 1, $$cr),
            () => this.matchschema_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchschema_$0_1($$dpth: number, $$cr?: ContextRecorder): Nullable<schema_$0_1> {
        return this.matchsomeType($$dpth + 1, $$cr);
    }
    public matchschema_$0_2($$dpth: number, $$cr?: ContextRecorder): Nullable<schema_$0_2> {
        return this.matchname($$dpth + 1, $$cr);
    }
    public matchtypeDef($$dpth: number, $$cr?: ContextRecorder): Nullable<typeDef> {
        return this.runner<typeDef>($$dpth,
            (log) => {
                if (log) {
                    log("typeDef");
                }
                let $scope$name: Nullable<name>;
                let $scope$def: Nullable<someType>;
                let $$res: Nullable<typeDef> = null;
                if (true
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:type)`, $$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), false) !== null
                    && ($scope$name = this.matchname($$dpth + 1, $$cr)) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && this.loop<ws>(() => this.matchws($$dpth + 1, $$cr), true) !== null
                    && ($scope$def = this.matchsomeType($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.typeDef, name: $scope$name, def: $scope$def};
                }
                return $$res;
            }, $$cr)();
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchglobals(0);
        const ans = res !== null && this.finished();
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchglobals(0);
        if (res && this.finished()) {
            return new ParseResult(res, null);
        }
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.matchglobals(0, rec);
        return new ParseResult(res,
            rec.getErr() ?? new SyntaxErr(this.mark(), new Set(["$EOF"]), new Set([])));
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private runner<T>($$dpth: number, fn: $$RuleType<T>, cr?: ContextRecorder): $$RuleType<T> {
        return () => {
            const mrk = this.mark();
            const res = cr ? (() => {
                const extraInfo: string[] = [];
                const result = fn((msg: string) => extraInfo.push(msg));
                cr.record(mrk, $$dpth, result, this.negating, extraInfo);
                return result;
            })() : fn();
            if (res !== null) {
                return res;
            }
            this.reset(mrk);
            return null;
        };
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ContextRecorder): Nullable<string> {
        return this.runner<string>(dpth,
            (log) => {
                if (log) {
                    if (this.negating) {
                        log("$$!StrMatch");
                    } else {
                        log("$$StrMatch");
                    }
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    log(match.substring(3, match.length - 1));
                }
                const reg = new RegExp(match, "y");
                reg.lastIndex = this.mark().overallPos;
                const res = reg.exec(this.input);
                if (res) {
                    let lineJmp = 0;
                    let lind = -1;
                    for (let i = 0; i < res[0].length; ++i) {
                        if (res[0][i] === "\n") {
                            ++lineJmp;
                            lind = i;
                        }
                    }
                    this.pos = {
                        overallPos: reg.lastIndex,
                        line: this.pos.line + lineJmp,
                        offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
                    };
                    return res[0];
                }
                return null;
            }, cr)();
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export class ParseResult {
    public ast: Nullable<globals>;
    public err: Nullable<SyntaxErr>;
    constructor(ast: Nullable<globals>, err: Nullable<SyntaxErr>) {
        this.ast = ast;
        this.err = err;
    }
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export class SyntaxErr {
    public pos: PosInfo;
    public exprules: string[];
    public expmatches: string[];
    constructor(pos: PosInfo, exprules: Set<string>, expmatches: Set<string>) {
        this.pos = pos;
        this.exprules = [...exprules];
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Tried to match rules ${this.exprules.join(", ")}. Expected one of ${this.expmatches.map((x) => ` '${x}'`)}`;
    }
}
class ErrorTracker implements ContextRecorder {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private mnd: number = -1;
    private prules: Set<string> = new Set();
    private pmatches: Set<string> = new Set();
    public record(pos: PosInfo, depth: number, result: any, negating: boolean, extraInfo: string[]) {
        if ((result === null) === negating) {
            return;
        }
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.mnd = depth;
            this.pmatches.clear();
            this.prules.clear();
        } else if (pos.overallPos === this.mxpos.overallPos && depth < this.mnd) {
            this.mnd = depth;
            this.prules.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos && extraInfo.length >= 2) {
            if (extraInfo[0] === "$$StrMatch") {
                this.pmatches.add(extraInfo[1]);
            }
            if (extraInfo[0] === "$$!StrMatch") {
                this.pmatches.add(`not ${extraInfo[1]}`);
            }
        }
        if (this.mxpos.overallPos === pos.overallPos && this.mnd === depth) {
            extraInfo.forEach((x) => { if (x !== "$$StrMatch" && x !== "$$!StrMatch") { this.prules.add(x); } });
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1) {
            return new SyntaxErr(this.mxpos, this.prules, this.pmatches);
        }
        return null;
    }
}