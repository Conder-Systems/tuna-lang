
const users = {}
const USER_LOCK_PREFIX = 'u'

const chats = {}
const CHAT_LOCK_PREFIX = 'c'

func lock_name_for_user(name) {
    return USER_LOCK_PREFIX + '-' + name
}

func lock_for_chat_name(name) {
    return CHAT_LOCK_PREFIX + '-' + name
}

pub func create_user(name: string) {
    const lock_name = lock_name_for_user(name)
    lock_name.lock()
    if users[name] != none {
        lock_name.release()
        return 'user already exists'
    }
    users[name] = {chats: []}
    lock_name.release()
    return 'user created'
}

pub func get_user(name: string) {
    return {
        isNone: users[name] == none
        val: users[name]
    }
}

pub func create_chat_group(group_name: string, initial_users: string[]) {
    const lock_name = lock_for_chat_name(group_name)
    lock_name.lock()
    if chats[group_name] != none {
        lock_name.release()
        return 'group already exists'
    }

    chats[group_name] = {
        msgs: []
    }
    lock_name.release()

    for user in initial_users {
        users[user].chats.push(group_name)
    }
    return 'created'
}

type msg = {
    from: string,
    body: string
}

pub func send_message(m: msg, group) {
    if chats[group] != none {
        chats[group].msgs.push(m)
    } else {
        return 'group does not exist'
    }
}

pub func get_my_messages(user) {
    
    if users[user] != none {
        const my_chats = users[user].chats

        const msgs = {}
        for chat in my_chats {
            msgs[chat] = chats[chat].msgs
        }
        return msgs
    } else {
        return 'user does not exist'
    }
}